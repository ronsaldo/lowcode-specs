<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Cog Lowcode Documentation</title>
    <link rel="stylesheet" href="lowcode.css" type="text/css"/>
  </head>
  <body>
    <h1>Cog Lowcode Documentation</h1>
    <div id="description">
    The Lowcode instruction set defines a register based virtual machine for
    C like low-level operations and Smalltalk object oriented pointer
    manipulations. 
        
        
        
        <br/>

    Lowcode has different set of registers, one for integer, another for
    object-oriented pointers and another for floating point numbers.
        
        
        
        <br/>
    Lowcode is encoded using the Sista inline primitives and they starting with
    opcode inline primitive.
        
        
        
        <br/></div>
    <div id="instruction-table">
      <h2>Lowcode Instruction Set Table</h2>
      <table>
        <tr>
          <th>Opcode</th>
          <th>Mnemonic</th>
          <th>Name</th>
        </tr>
        <tr>
          <td>30000</td>
          <td>
            <a href="#spec-of-oopEqual">oopEqual</a>
          </td>
          <td>Oop Equality</td>
        </tr>
        <tr>
          <td>30001</td>
          <td>
            <a href="#spec-of-oopNotEqual">oopNotEqual</a>
          </td>
          <td>Oop Not Equality</td>
        </tr>
        <tr>
          <td>30002</td>
          <td>
            <a href="#spec-of-storeObjectField">storeObjectField</a>
          </td>
          <td>Store an object field</td>
        </tr>
        <tr>
          <td>30003</td>
          <td>
            <a href="#spec-of-storeObjectFieldAt">storeObjectFieldAt</a>
          </td>
          <td>Store an object field</td>
        </tr>
        <tr>
          <td>31000</td>
          <td>
            <a href="#spec-of-byteSizeOf">byteSizeOf</a>
          </td>
          <td>Byte size of object</td>
        </tr>
        <tr>
          <td>31001</td>
          <td>
            <a href="#spec-of-firstFieldPointer">firstFieldPointer</a>
          </td>
          <td>First Fixed Field</td>
        </tr>
        <tr>
          <td>31002</td>
          <td>
            <a href="#spec-of-firstIndexableFieldPointer">firstIndexableFieldPointer</a>
          </td>
          <td>First Indexable Field</td>
        </tr>
        <tr>
          <td>31003</td>
          <td>
            <a href="#spec-of-isBytes">isBytes</a>
          </td>
          <td>Is bytes object</td>
        </tr>
        <tr>
          <td>31004</td>
          <td>
            <a href="#spec-of-isFloatObject">isFloatObject</a>
          </td>
          <td>Is float object</td>
        </tr>
        <tr>
          <td>31005</td>
          <td>
            <a href="#spec-of-isIndexable">isIndexable</a>
          </td>
          <td>Is indexable object</td>
        </tr>
        <tr>
          <td>31006</td>
          <td>
            <a href="#spec-of-isIntegerObject">isIntegerObject</a>
          </td>
          <td>Is integer object</td>
        </tr>
        <tr>
          <td>31007</td>
          <td>
            <a href="#spec-of-isPointers">isPointers</a>
          </td>
          <td>Is pointers object</td>
        </tr>
        <tr>
          <td>31008</td>
          <td>
            <a href="#spec-of-isWords">isWords</a>
          </td>
          <td>Is Words object</td>
        </tr>
        <tr>
          <td>31009</td>
          <td>
            <a href="#spec-of-isWordsOrBytes">isWordsOrBytes</a>
          </td>
          <td>Is bytes object</td>
        </tr>
        <tr>
          <td>31010</td>
          <td>
            <a href="#spec-of-oopSmallIntegerToInt32">oopSmallIntegerToInt32</a>
          </td>
          <td>Oop to Int</td>
        </tr>
        <tr>
          <td>31011</td>
          <td>
            <a href="#spec-of-oopSmallIntegerToInt64">oopSmallIntegerToInt64</a>
          </td>
          <td>Oop to Int</td>
        </tr>
        <tr>
          <td>31012</td>
          <td>
            <a href="#spec-of-oopToBoolean32">oopToBoolean32</a>
          </td>
          <td>Oop to Boolean</td>
        </tr>
        <tr>
          <td>31013</td>
          <td>
            <a href="#spec-of-oopToBoolean64">oopToBoolean64</a>
          </td>
          <td>Oop to Boolean</td>
        </tr>
        <tr>
          <td>31014</td>
          <td>
            <a href="#spec-of-oopToFloat32">oopToFloat32</a>
          </td>
          <td>Oop to Int</td>
        </tr>
        <tr>
          <td>31015</td>
          <td>
            <a href="#spec-of-oopToFloat64">oopToFloat64</a>
          </td>
          <td>Oop to Int</td>
        </tr>
        <tr>
          <td>31016</td>
          <td>
            <a href="#spec-of-oopToInt32">oopToInt32</a>
          </td>
          <td>Oop to Int</td>
        </tr>
        <tr>
          <td>31017</td>
          <td>
            <a href="#spec-of-oopToInt64">oopToInt64</a>
          </td>
          <td>Oop to Int</td>
        </tr>
        <tr>
          <td>31018</td>
          <td>
            <a href="#spec-of-oopToPointer">oopToPointer</a>
          </td>
          <td>Oop to Pointer</td>
        </tr>
        <tr>
          <td>31019</td>
          <td>
            <a href="#spec-of-oopToPointerReinterpret">oopToPointerReinterpret</a>
          </td>
          <td>Cast Oop to Pointer Reinterpret</td>
        </tr>
        <tr>
          <td>31020</td>
          <td>
            <a href="#spec-of-oopToUInt32">oopToUInt32</a>
          </td>
          <td>Oop to Int</td>
        </tr>
        <tr>
          <td>31021</td>
          <td>
            <a href="#spec-of-oopToUInt64">oopToUInt64</a>
          </td>
          <td>Oop to Int</td>
        </tr>
        <tr>
          <td>31022</td>
          <td>
            <a href="#spec-of-pin">pin</a>
          </td>
          <td>Pin Object</td>
        </tr>
        <tr>
          <td>31023</td>
          <td>
            <a href="#spec-of-unpin">unpin</a>
          </td>
          <td>Unpin Object</td>
        </tr>
        <tr>
          <td>32000</td>
          <td>
            <a href="#spec-of-add32">add32</a>
          </td>
          <td>Integer Addition</td>
        </tr>
        <tr>
          <td>32001</td>
          <td>
            <a href="#spec-of-add64">add64</a>
          </td>
          <td>Integer Addition</td>
        </tr>
        <tr>
          <td>32002</td>
          <td>
            <a href="#spec-of-alloca32">alloca32</a>
          </td>
          <td>Alloca</td>
        </tr>
        <tr>
          <td>32003</td>
          <td>
            <a href="#spec-of-alloca64">alloca64</a>
          </td>
          <td>Alloca</td>
        </tr>
        <tr>
          <td>32004</td>
          <td>
            <a href="#spec-of-and32">and32</a>
          </td>
          <td>Bitwise And</td>
        </tr>
        <tr>
          <td>32005</td>
          <td>
            <a href="#spec-of-and64">and64</a>
          </td>
          <td>Bitwise And</td>
        </tr>
        <tr>
          <td>32006</td>
          <td>
            <a href="#spec-of-arithmeticRightShift32">arithmeticRightShift32</a>
          </td>
          <td>Arithmetic Right Shift</td>
        </tr>
        <tr>
          <td>32007</td>
          <td>
            <a href="#spec-of-arithmeticRightShift64">arithmeticRightShift64</a>
          </td>
          <td>Arithmetic Right Shift</td>
        </tr>
        <tr>
          <td>32008</td>
          <td>
            <a href="#spec-of-beginCall">beginCall</a>
          </td>
          <td>Begins a function call.</td>
        </tr>
        <tr>
          <td>32009</td>
          <td>
            <a href="#spec-of-callArgumentFloat32">callArgumentFloat32</a>
          </td>
          <td>Push Float32 call argument</td>
        </tr>
        <tr>
          <td>32010</td>
          <td>
            <a href="#spec-of-callArgumentFloat64">callArgumentFloat64</a>
          </td>
          <td>Push Float64 call argument</td>
        </tr>
        <tr>
          <td>32011</td>
          <td>
            <a href="#spec-of-callArgumentInt32">callArgumentInt32</a>
          </td>
          <td>Pushes Int32 call argument</td>
        </tr>
        <tr>
          <td>32012</td>
          <td>
            <a href="#spec-of-callArgumentInt64">callArgumentInt64</a>
          </td>
          <td>Push Int64 call argument</td>
        </tr>
        <tr>
          <td>32013</td>
          <td>
            <a href="#spec-of-callArgumentPointer">callArgumentPointer</a>
          </td>
          <td>Push Pointer call argument</td>
        </tr>
        <tr>
          <td>32014</td>
          <td>
            <a href="#spec-of-callArgumentStructure">callArgumentStructure</a>
          </td>
          <td>Push structure call argument</td>
        </tr>
        <tr>
          <td>32015</td>
          <td>
            <a href="#spec-of-callInstruction">callInstruction</a>
          </td>
          <td>Low-Level call</td>
        </tr>
        <tr>
          <td>32016</td>
          <td>
            <a href="#spec-of-callPhysical">callPhysical</a>
          </td>
          <td>Push Int32 from physical register</td>
        </tr>
        <tr>
          <td>32017</td>
          <td>
            <a href="#spec-of-checkSessionIdentifier">checkSessionIdentifier</a>
          </td>
          <td>Pushes true or false if the session ID matches</td>
        </tr>
        <tr>
          <td>32018</td>
          <td>
            <a href="#spec-of-compareAndSwap32">compareAndSwap32</a>
          </td>
          <td>Compare and Swap 32 Bits</td>
        </tr>
        <tr>
          <td>32019</td>
          <td>
            <a href="#spec-of-div32">div32</a>
          </td>
          <td>Integer Signed Division</td>
        </tr>
        <tr>
          <td>32020</td>
          <td>
            <a href="#spec-of-div64">div64</a>
          </td>
          <td>Integer Signed Division</td>
        </tr>
        <tr>
          <td>32021</td>
          <td>
            <a href="#spec-of-duplicateFloat32">duplicateFloat32</a>
          </td>
          <td>Duplicate Float32</td>
        </tr>
        <tr>
          <td>32022</td>
          <td>
            <a href="#spec-of-duplicateFloat64">duplicateFloat64</a>
          </td>
          <td>Duplicate Float64</td>
        </tr>
        <tr>
          <td>32023</td>
          <td>
            <a href="#spec-of-duplicateInt32">duplicateInt32</a>
          </td>
          <td>Duplicate Int32</td>
        </tr>
        <tr>
          <td>32024</td>
          <td>
            <a href="#spec-of-duplicateInt64">duplicateInt64</a>
          </td>
          <td>Duplicate Int64</td>
        </tr>
        <tr>
          <td>32025</td>
          <td>
            <a href="#spec-of-duplicatePointer">duplicatePointer</a>
          </td>
          <td>Duplicate Pointer</td>
        </tr>
        <tr>
          <td>32026</td>
          <td>
            <a href="#spec-of-effectiveAddress32">effectiveAddress32</a>
          </td>
          <td>Compute Effective Address 32-bit</td>
        </tr>
        <tr>
          <td>32027</td>
          <td>
            <a href="#spec-of-effectiveAddress64">effectiveAddress64</a>
          </td>
          <td>Compute Effective Address 64-bit</td>
        </tr>
        <tr>
          <td>32028</td>
          <td>
            <a href="#spec-of-endCall">endCall</a>
          </td>
          <td>End a function call.</td>
        </tr>
        <tr>
          <td>32029</td>
          <td>
            <a href="#spec-of-endCallNoCleanup">endCallNoCleanup</a>
          </td>
          <td>End a function call.</td>
        </tr>
        <tr>
          <td>32030</td>
          <td>
            <a href="#spec-of-float32Add">float32Add</a>
          </td>
          <td>Float32 addition</td>
        </tr>
        <tr>
          <td>32031</td>
          <td>
            <a href="#spec-of-float32Div">float32Div</a>
          </td>
          <td>Float32 division</td>
        </tr>
        <tr>
          <td>32032</td>
          <td>
            <a href="#spec-of-float32Equal">float32Equal</a>
          </td>
          <td>Float32 Equality</td>
        </tr>
        <tr>
          <td>32033</td>
          <td>
            <a href="#spec-of-float32Great">float32Great</a>
          </td>
          <td>Float32 Great Than</td>
        </tr>
        <tr>
          <td>32034</td>
          <td>
            <a href="#spec-of-float32GreatEqual">float32GreatEqual</a>
          </td>
          <td>Float32 Great or Equal Than</td>
        </tr>
        <tr>
          <td>32035</td>
          <td>
            <a href="#spec-of-float32Less">float32Less</a>
          </td>
          <td>Float32 Less Than</td>
        </tr>
        <tr>
          <td>32036</td>
          <td>
            <a href="#spec-of-float32LessEqual">float32LessEqual</a>
          </td>
          <td>Float32 Less or Eual Than</td>
        </tr>
        <tr>
          <td>32037</td>
          <td>
            <a href="#spec-of-float32Mul">float32Mul</a>
          </td>
          <td>Float32 multiplication</td>
        </tr>
        <tr>
          <td>32038</td>
          <td>
            <a href="#spec-of-float32NotEqual">float32NotEqual</a>
          </td>
          <td>Float32 Inequality</td>
        </tr>
        <tr>
          <td>32039</td>
          <td>
            <a href="#spec-of-float32Sub">float32Sub</a>
          </td>
          <td>Float32 subtraction</td>
        </tr>
        <tr>
          <td>32040</td>
          <td>
            <a href="#spec-of-float32ToFloat64">float32ToFloat64</a>
          </td>
          <td>Float32 to Float64</td>
        </tr>
        <tr>
          <td>32041</td>
          <td>
            <a href="#spec-of-float32ToInt32">float32ToInt32</a>
          </td>
          <td>Float32 to Int32</td>
        </tr>
        <tr>
          <td>32042</td>
          <td>
            <a href="#spec-of-float32ToInt64">float32ToInt64</a>
          </td>
          <td>Float32 to Int64</td>
        </tr>
        <tr>
          <td>32043</td>
          <td>
            <a href="#spec-of-float32ToUInt32">float32ToUInt32</a>
          </td>
          <td>Float32 to UInt32</td>
        </tr>
        <tr>
          <td>32044</td>
          <td>
            <a href="#spec-of-float32ToUInt64">float32ToUInt64</a>
          </td>
          <td>Float32 to UInt64</td>
        </tr>
        <tr>
          <td>32045</td>
          <td>
            <a href="#spec-of-float64Add">float64Add</a>
          </td>
          <td>Float64 addition</td>
        </tr>
        <tr>
          <td>32046</td>
          <td>
            <a href="#spec-of-float64Div">float64Div</a>
          </td>
          <td>Float64 division</td>
        </tr>
        <tr>
          <td>32047</td>
          <td>
            <a href="#spec-of-float64Equal">float64Equal</a>
          </td>
          <td>Float64 Equality</td>
        </tr>
        <tr>
          <td>32048</td>
          <td>
            <a href="#spec-of-float64Great">float64Great</a>
          </td>
          <td>Float64 Great Than</td>
        </tr>
        <tr>
          <td>32049</td>
          <td>
            <a href="#spec-of-float64GreatEqual">float64GreatEqual</a>
          </td>
          <td>Float64 Great or Equal Than</td>
        </tr>
        <tr>
          <td>32050</td>
          <td>
            <a href="#spec-of-float64Less">float64Less</a>
          </td>
          <td>Float64 Less Than</td>
        </tr>
        <tr>
          <td>32051</td>
          <td>
            <a href="#spec-of-float64LessEqual">float64LessEqual</a>
          </td>
          <td>Float64 Less or Equal Than</td>
        </tr>
        <tr>
          <td>32052</td>
          <td>
            <a href="#spec-of-float64Mul">float64Mul</a>
          </td>
          <td>Float64 multiplication</td>
        </tr>
        <tr>
          <td>32053</td>
          <td>
            <a href="#spec-of-float64NotEqual">float64NotEqual</a>
          </td>
          <td>Float64 Inequality</td>
        </tr>
        <tr>
          <td>32054</td>
          <td>
            <a href="#spec-of-float64Sub">float64Sub</a>
          </td>
          <td>Float64 subtraction</td>
        </tr>
        <tr>
          <td>32055</td>
          <td>
            <a href="#spec-of-float64ToFloat32">float64ToFloat32</a>
          </td>
          <td>Float64 to Float32</td>
        </tr>
        <tr>
          <td>32056</td>
          <td>
            <a href="#spec-of-float64ToInt32">float64ToInt32</a>
          </td>
          <td>Float64 to Int32</td>
        </tr>
        <tr>
          <td>32057</td>
          <td>
            <a href="#spec-of-float64ToInt64">float64ToInt64</a>
          </td>
          <td>Float64 to Int64</td>
        </tr>
        <tr>
          <td>32058</td>
          <td>
            <a href="#spec-of-float64ToUInt32">float64ToUInt32</a>
          </td>
          <td>Float64 to UInt32</td>
        </tr>
        <tr>
          <td>32059</td>
          <td>
            <a href="#spec-of-float64ToUInt64">float64ToUInt64</a>
          </td>
          <td>Float64 to UInt64</td>
        </tr>
        <tr>
          <td>32060</td>
          <td>
            <a href="#spec-of-free">free</a>
          </td>
          <td>Frees Memory</td>
        </tr>
        <tr>
          <td>32061</td>
          <td>
            <a href="#spec-of-int32Equal">int32Equal</a>
          </td>
          <td>Int32 Equality</td>
        </tr>
        <tr>
          <td>32062</td>
          <td>
            <a href="#spec-of-int32Great">int32Great</a>
          </td>
          <td>Int32 Great Than</td>
        </tr>
        <tr>
          <td>32063</td>
          <td>
            <a href="#spec-of-int32GreatEqual">int32GreatEqual</a>
          </td>
          <td>Int32 Great or EqualThan</td>
        </tr>
        <tr>
          <td>32064</td>
          <td>
            <a href="#spec-of-int32Less">int32Less</a>
          </td>
          <td>Int32 Less Than</td>
        </tr>
        <tr>
          <td>32065</td>
          <td>
            <a href="#spec-of-int32LessEqual">int32LessEqual</a>
          </td>
          <td>Int32 Less or Equal Than</td>
        </tr>
        <tr>
          <td>32066</td>
          <td>
            <a href="#spec-of-int32NotEqual">int32NotEqual</a>
          </td>
          <td>Int32 Inequality</td>
        </tr>
        <tr>
          <td>32067</td>
          <td>
            <a href="#spec-of-int32ToFloat32">int32ToFloat32</a>
          </td>
          <td>Int32 to Float32</td>
        </tr>
        <tr>
          <td>32068</td>
          <td>
            <a href="#spec-of-int32ToFloat64">int32ToFloat64</a>
          </td>
          <td>Int32 to Float64</td>
        </tr>
        <tr>
          <td>32069</td>
          <td>
            <a href="#spec-of-int32ToPointer">int32ToPointer</a>
          </td>
          <td>Int32 to Pointer</td>
        </tr>
        <tr>
          <td>32070</td>
          <td>
            <a href="#spec-of-int64Equal">int64Equal</a>
          </td>
          <td>Int64 Equality</td>
        </tr>
        <tr>
          <td>32071</td>
          <td>
            <a href="#spec-of-int64Great">int64Great</a>
          </td>
          <td>Int64 Great Than</td>
        </tr>
        <tr>
          <td>32072</td>
          <td>
            <a href="#spec-of-int64GreatEqual">int64GreatEqual</a>
          </td>
          <td>Int64 Great or EqualThan</td>
        </tr>
        <tr>
          <td>32073</td>
          <td>
            <a href="#spec-of-int64Less">int64Less</a>
          </td>
          <td>Int64 Less Than</td>
        </tr>
        <tr>
          <td>32074</td>
          <td>
            <a href="#spec-of-int64LessEqual">int64LessEqual</a>
          </td>
          <td>Int64 Less or Equal Than</td>
        </tr>
        <tr>
          <td>32075</td>
          <td>
            <a href="#spec-of-int64NotEqual">int64NotEqual</a>
          </td>
          <td>Int64 Inequality</td>
        </tr>
        <tr>
          <td>32076</td>
          <td>
            <a href="#spec-of-int64ToFloat32">int64ToFloat32</a>
          </td>
          <td>Int64 to Float32</td>
        </tr>
        <tr>
          <td>32077</td>
          <td>
            <a href="#spec-of-int64ToFloat64">int64ToFloat64</a>
          </td>
          <td>Int64 to Float64</td>
        </tr>
        <tr>
          <td>32078</td>
          <td>
            <a href="#spec-of-int64ToPointer">int64ToPointer</a>
          </td>
          <td>Int64 to Pointer</td>
        </tr>
        <tr>
          <td>32079</td>
          <td>
            <a href="#spec-of-leftShift32">leftShift32</a>
          </td>
          <td>Left Shift</td>
        </tr>
        <tr>
          <td>32080</td>
          <td>
            <a href="#spec-of-leftShift64">leftShift64</a>
          </td>
          <td>Left Shift</td>
        </tr>
        <tr>
          <td>32081</td>
          <td>
            <a href="#spec-of-loadFloat32FromMemory">loadFloat32FromMemory</a>
          </td>
          <td>Load Float 32 from Memory</td>
        </tr>
        <tr>
          <td>32082</td>
          <td>
            <a href="#spec-of-loadFloat64FromMemory">loadFloat64FromMemory</a>
          </td>
          <td>Load Float 64 from Memory</td>
        </tr>
        <tr>
          <td>32083</td>
          <td>
            <a href="#spec-of-loadInt16FromMemory">loadInt16FromMemory</a>
          </td>
          <td>Load U16 from Memory</td>
        </tr>
        <tr>
          <td>32084</td>
          <td>
            <a href="#spec-of-loadInt32FromMemory">loadInt32FromMemory</a>
          </td>
          <td>Load I32 from Memory</td>
        </tr>
        <tr>
          <td>32085</td>
          <td>
            <a href="#spec-of-loadInt64FromMemory">loadInt64FromMemory</a>
          </td>
          <td>Load I64 from Memory</td>
        </tr>
        <tr>
          <td>32086</td>
          <td>
            <a href="#spec-of-loadInt8FromMemory">loadInt8FromMemory</a>
          </td>
          <td>Load I8 from Memory</td>
        </tr>
        <tr>
          <td>32087</td>
          <td>
            <a href="#spec-of-loadLocalAddress">loadLocalAddress</a>
          </td>
          <td>Load local address</td>
        </tr>
        <tr>
          <td>32088</td>
          <td>
            <a href="#spec-of-loadLocalFloat32">loadLocalFloat32</a>
          </td>
          <td>Load single precision float from stack</td>
        </tr>
        <tr>
          <td>32089</td>
          <td>
            <a href="#spec-of-loadLocalFloat64">loadLocalFloat64</a>
          </td>
          <td>Load double precision float from stack</td>
        </tr>
        <tr>
          <td>32090</td>
          <td>
            <a href="#spec-of-loadLocalInt16">loadLocalInt16</a>
          </td>
          <td>Load I16 from stack</td>
        </tr>
        <tr>
          <td>32091</td>
          <td>
            <a href="#spec-of-loadLocalInt32">loadLocalInt32</a>
          </td>
          <td>Load I32 from stack</td>
        </tr>
        <tr>
          <td>32092</td>
          <td>
            <a href="#spec-of-loadLocalInt64">loadLocalInt64</a>
          </td>
          <td>Load I64 from stack</td>
        </tr>
        <tr>
          <td>32093</td>
          <td>
            <a href="#spec-of-loadLocalInt8">loadLocalInt8</a>
          </td>
          <td>Load I8 from stack</td>
        </tr>
        <tr>
          <td>32094</td>
          <td>
            <a href="#spec-of-loadLocalPointer">loadLocalPointer</a>
          </td>
          <td>Load pointer from stack</td>
        </tr>
        <tr>
          <td>32095</td>
          <td>
            <a href="#spec-of-loadLocalUInt16">loadLocalUInt16</a>
          </td>
          <td>Load U16 from stack</td>
        </tr>
        <tr>
          <td>32096</td>
          <td>
            <a href="#spec-of-loadLocalUInt32">loadLocalUInt32</a>
          </td>
          <td>Load U32 from stack</td>
        </tr>
        <tr>
          <td>32097</td>
          <td>
            <a href="#spec-of-loadLocalUInt64">loadLocalUInt64</a>
          </td>
          <td>Load U8 from stack</td>
        </tr>
        <tr>
          <td>32098</td>
          <td>
            <a href="#spec-of-loadLocalUInt8">loadLocalUInt8</a>
          </td>
          <td>Load U8 from stack</td>
        </tr>
        <tr>
          <td>32099</td>
          <td>
            <a href="#spec-of-loadPointerFromMemory">loadPointerFromMemory</a>
          </td>
          <td>Load Pointer from Memory</td>
        </tr>
        <tr>
          <td>32100</td>
          <td>
            <a href="#spec-of-loadUInt16FromMemory">loadUInt16FromMemory</a>
          </td>
          <td>Load U16 from Memory</td>
        </tr>
        <tr>
          <td>32101</td>
          <td>
            <a href="#spec-of-loadUInt32FromMemory">loadUInt32FromMemory</a>
          </td>
          <td>Load U32 from Memory</td>
        </tr>
        <tr>
          <td>32102</td>
          <td>
            <a href="#spec-of-loadUInt64FromMemory">loadUInt64FromMemory</a>
          </td>
          <td>Load U64 from Memory</td>
        </tr>
        <tr>
          <td>32103</td>
          <td>
            <a href="#spec-of-loadUInt8FromMemory">loadUInt8FromMemory</a>
          </td>
          <td>Load U8 from Memory</td>
        </tr>
        <tr>
          <td>32104</td>
          <td>
            <a href="#spec-of-localFrameSize">localFrameSize</a>
          </td>
          <td>Local Frame Size</td>
        </tr>
        <tr>
          <td>32105</td>
          <td>
            <a href="#spec-of-lockRegisters">lockRegisters</a>
          </td>
          <td>Lock Registers</td>
        </tr>
        <tr>
          <td>32106</td>
          <td>
            <a href="#spec-of-lockVM">lockVM</a>
          </td>
          <td>Lock VM</td>
        </tr>
        <tr>
          <td>32107</td>
          <td>
            <a href="#spec-of-malloc32">malloc32</a>
          </td>
          <td>Malloc</td>
        </tr>
        <tr>
          <td>32108</td>
          <td>
            <a href="#spec-of-malloc64">malloc64</a>
          </td>
          <td>Malloc</td>
        </tr>
        <tr>
          <td>32109</td>
          <td>
            <a href="#spec-of-memcpy32">memcpy32</a>
          </td>
          <td>Copies a block of memory</td>
        </tr>
        <tr>
          <td>32110</td>
          <td>
            <a href="#spec-of-memcpy64">memcpy64</a>
          </td>
          <td>Copies a block of memory</td>
        </tr>
        <tr>
          <td>32111</td>
          <td>
            <a href="#spec-of-memcpyFixed">memcpyFixed</a>
          </td>
          <td>Copies a block of memory</td>
        </tr>
        <tr>
          <td>32112</td>
          <td>
            <a href="#spec-of-moveFloat32ToPhysical">moveFloat32ToPhysical</a>
          </td>
          <td>Move Float32 To Physical Register</td>
        </tr>
        <tr>
          <td>32113</td>
          <td>
            <a href="#spec-of-moveFloat64ToPhysical">moveFloat64ToPhysical</a>
          </td>
          <td>Move Float64 Register To Physical Register</td>
        </tr>
        <tr>
          <td>32114</td>
          <td>
            <a href="#spec-of-moveInt32ToPhysical">moveInt32ToPhysical</a>
          </td>
          <td>Move Int32  To Physical Register</td>
        </tr>
        <tr>
          <td>32115</td>
          <td>
            <a href="#spec-of-moveInt64ToPhysical">moveInt64ToPhysical</a>
          </td>
          <td>Move Int64 To Physical Register</td>
        </tr>
        <tr>
          <td>32116</td>
          <td>
            <a href="#spec-of-movePointerToPhysical">movePointerToPhysical</a>
          </td>
          <td>Move Pointer To Physical Register</td>
        </tr>
        <tr>
          <td>32117</td>
          <td>
            <a href="#spec-of-mul32">mul32</a>
          </td>
          <td>Integer Signed Multiplication</td>
        </tr>
        <tr>
          <td>32118</td>
          <td>
            <a href="#spec-of-mul64">mul64</a>
          </td>
          <td>Integer Signed Multiplication</td>
        </tr>
        <tr>
          <td>32119</td>
          <td>
            <a href="#spec-of-neg32">neg32</a>
          </td>
          <td>Integer Negation</td>
        </tr>
        <tr>
          <td>32120</td>
          <td>
            <a href="#spec-of-neg64">neg64</a>
          </td>
          <td>Integer Negation</td>
        </tr>
        <tr>
          <td>32121</td>
          <td>
            <a href="#spec-of-not32">not32</a>
          </td>
          <td>Bitwise Not</td>
        </tr>
        <tr>
          <td>32122</td>
          <td>
            <a href="#spec-of-not64">not64</a>
          </td>
          <td>Bitwise Not</td>
        </tr>
        <tr>
          <td>32123</td>
          <td>
            <a href="#spec-of-or32">or32</a>
          </td>
          <td>Bitwise Or</td>
        </tr>
        <tr>
          <td>32124</td>
          <td>
            <a href="#spec-of-or64">or64</a>
          </td>
          <td>Bitwise Or</td>
        </tr>
        <tr>
          <td>32125</td>
          <td>
            <a href="#spec-of-performCallFloat32">performCallFloat32</a>
          </td>
          <td>Perform function call.</td>
        </tr>
        <tr>
          <td>32126</td>
          <td>
            <a href="#spec-of-performCallFloat64">performCallFloat64</a>
          </td>
          <td>Perform function call.</td>
        </tr>
        <tr>
          <td>32127</td>
          <td>
            <a href="#spec-of-performCallIndirectFloat32">performCallIndirectFloat32</a>
          </td>
          <td>Perform indirect function call.</td>
        </tr>
        <tr>
          <td>32128</td>
          <td>
            <a href="#spec-of-performCallIndirectFloat64">performCallIndirectFloat64</a>
          </td>
          <td>Perform indirect function call.</td>
        </tr>
        <tr>
          <td>32129</td>
          <td>
            <a href="#spec-of-performCallIndirectInt32">performCallIndirectInt32</a>
          </td>
          <td>Perform indirect function call.</td>
        </tr>
        <tr>
          <td>32130</td>
          <td>
            <a href="#spec-of-performCallIndirectInt64">performCallIndirectInt64</a>
          </td>
          <td>Perform indirect function call.</td>
        </tr>
        <tr>
          <td>32131</td>
          <td>
            <a href="#spec-of-performCallIndirectPointer">performCallIndirectPointer</a>
          </td>
          <td>Perform indirect function call.</td>
        </tr>
        <tr>
          <td>32132</td>
          <td>
            <a href="#spec-of-performCallIndirectStructure">performCallIndirectStructure</a>
          </td>
          <td>Perform indirection function call.</td>
        </tr>
        <tr>
          <td>32133</td>
          <td>
            <a href="#spec-of-performCallInt32">performCallInt32</a>
          </td>
          <td>Perform function call.</td>
        </tr>
        <tr>
          <td>32134</td>
          <td>
            <a href="#spec-of-performCallInt64">performCallInt64</a>
          </td>
          <td>Perform function call.</td>
        </tr>
        <tr>
          <td>32135</td>
          <td>
            <a href="#spec-of-performCallPointer">performCallPointer</a>
          </td>
          <td>Perform function call.</td>
        </tr>
        <tr>
          <td>32136</td>
          <td>
            <a href="#spec-of-performCallStructure">performCallStructure</a>
          </td>
          <td>Perform function call.</td>
        </tr>
        <tr>
          <td>32137</td>
          <td>
            <a href="#spec-of-plaftormCode">plaftormCode</a>
          </td>
          <td>Platform Code</td>
        </tr>
        <tr>
          <td>32138</td>
          <td>
            <a href="#spec-of-pointerAddOffset32">pointerAddOffset32</a>
          </td>
          <td>Adds an offset to a pointer</td>
        </tr>
        <tr>
          <td>32139</td>
          <td>
            <a href="#spec-of-pointerAddOffset64">pointerAddOffset64</a>
          </td>
          <td>Adds an offset to a pointer</td>
        </tr>
        <tr>
          <td>32140</td>
          <td>
            <a href="#spec-of-pointerEqual">pointerEqual</a>
          </td>
          <td>Pointer Equality</td>
        </tr>
        <tr>
          <td>32141</td>
          <td>
            <a href="#spec-of-pointerNotEqual">pointerNotEqual</a>
          </td>
          <td>Pointer Not Equality</td>
        </tr>
        <tr>
          <td>32142</td>
          <td>
            <a href="#spec-of-pointerToInt32">pointerToInt32</a>
          </td>
          <td>Pointer to Int32</td>
        </tr>
        <tr>
          <td>32143</td>
          <td>
            <a href="#spec-of-pointerToInt64">pointerToInt64</a>
          </td>
          <td>Pointer to Int64</td>
        </tr>
        <tr>
          <td>32144</td>
          <td>
            <a href="#spec-of-popFloat32">popFloat32</a>
          </td>
          <td>Pop Float32</td>
        </tr>
        <tr>
          <td>32145</td>
          <td>
            <a href="#spec-of-popFloat64">popFloat64</a>
          </td>
          <td>Pop Float64</td>
        </tr>
        <tr>
          <td>32146</td>
          <td>
            <a href="#spec-of-popInt32">popInt32</a>
          </td>
          <td>Pop Int32</td>
        </tr>
        <tr>
          <td>32147</td>
          <td>
            <a href="#spec-of-popInt64">popInt64</a>
          </td>
          <td>Pop Int64</td>
        </tr>
        <tr>
          <td>32148</td>
          <td>
            <a href="#spec-of-popPointer">popPointer</a>
          </td>
          <td>Pop Pointer</td>
        </tr>
        <tr>
          <td>32149</td>
          <td>
            <a href="#spec-of-pushConstantUInt32">pushConstantUInt32</a>
          </td>
          <td>Push a 32-bit integer constant</td>
        </tr>
        <tr>
          <td>32150</td>
          <td>
            <a href="#spec-of-pushConstantUInt64">pushConstantUInt64</a>
          </td>
          <td>Push a 64-bit integer constant</td>
        </tr>
        <tr>
          <td>32151</td>
          <td>
            <a href="#spec-of-pushNullPointer">pushNullPointer</a>
          </td>
          <td>Push Null Pointer</td>
        </tr>
        <tr>
          <td>32152</td>
          <td>
            <a href="#spec-of-pushOne32">pushOne32</a>
          </td>
          <td>Push one constant 32-bit integer</td>
        </tr>
        <tr>
          <td>32153</td>
          <td>
            <a href="#spec-of-pushOne64">pushOne64</a>
          </td>
          <td>Push one constant 64-bit integer</td>
        </tr>
        <tr>
          <td>32154</td>
          <td>
            <a href="#spec-of-pushOneFloat32">pushOneFloat32</a>
          </td>
          <td>Push a single precision one constant</td>
        </tr>
        <tr>
          <td>32155</td>
          <td>
            <a href="#spec-of-pushOneFloat64">pushOneFloat64</a>
          </td>
          <td>Push a single precision one constant</td>
        </tr>
        <tr>
          <td>32156</td>
          <td>
            <a href="#spec-of-pushPhysicalFloat32">pushPhysicalFloat32</a>
          </td>
          <td>Push Float32 from physical register</td>
        </tr>
        <tr>
          <td>32157</td>
          <td>
            <a href="#spec-of-pushPhysicalFloat64">pushPhysicalFloat64</a>
          </td>
          <td>Push Float64 from physical register</td>
        </tr>
        <tr>
          <td>32158</td>
          <td>
            <a href="#spec-of-pushPhysicalInt32">pushPhysicalInt32</a>
          </td>
          <td>Push Int32 from physical register</td>
        </tr>
        <tr>
          <td>32159</td>
          <td>
            <a href="#spec-of-pushPhysicalInt64">pushPhysicalInt64</a>
          </td>
          <td>Push Int64 from physical register</td>
        </tr>
        <tr>
          <td>32160</td>
          <td>
            <a href="#spec-of-pushPhysicalPointer">pushPhysicalPointer</a>
          </td>
          <td>Push Pointer from physical register</td>
        </tr>
        <tr>
          <td>32161</td>
          <td>
            <a href="#spec-of-pushSessionIdentifier">pushSessionIdentifier</a>
          </td>
          <td>Pushes the unique session identifier</td>
        </tr>
        <tr>
          <td>32162</td>
          <td>
            <a href="#spec-of-pushZero32">pushZero32</a>
          </td>
          <td>Pushes zero constant</td>
        </tr>
        <tr>
          <td>32163</td>
          <td>
            <a href="#spec-of-pushZero64">pushZero64</a>
          </td>
          <td>Pushes zero constant</td>
        </tr>
        <tr>
          <td>32164</td>
          <td>
            <a href="#spec-of-pushZeroFloat32">pushZeroFloat32</a>
          </td>
          <td>Pushes a zero single precision float constant</td>
        </tr>
        <tr>
          <td>32165</td>
          <td>
            <a href="#spec-of-pushZeroFloat64">pushZeroFloat64</a>
          </td>
          <td>Pushes a zero single precision float constant</td>
        </tr>
        <tr>
          <td>32166</td>
          <td>
            <a href="#spec-of-rem32">rem32</a>
          </td>
          <td>Integer Signed Remainder</td>
        </tr>
        <tr>
          <td>32167</td>
          <td>
            <a href="#spec-of-rem64">rem64</a>
          </td>
          <td>Integer Signed Remainder</td>
        </tr>
        <tr>
          <td>32168</td>
          <td>
            <a href="#spec-of-rightShift32">rightShift32</a>
          </td>
          <td>Right Shift</td>
        </tr>
        <tr>
          <td>32169</td>
          <td>
            <a href="#spec-of-rightShift64">rightShift64</a>
          </td>
          <td>Right Shift</td>
        </tr>
        <tr>
          <td>32170</td>
          <td>
            <a href="#spec-of-signExtend32From16">signExtend32From16</a>
          </td>
          <td>Sign Extend 16-bit</td>
        </tr>
        <tr>
          <td>32171</td>
          <td>
            <a href="#spec-of-signExtend32From8">signExtend32From8</a>
          </td>
          <td>Sign Extend 8-bit</td>
        </tr>
        <tr>
          <td>32172</td>
          <td>
            <a href="#spec-of-signExtend64From16">signExtend64From16</a>
          </td>
          <td>Sign Extend 16-bit</td>
        </tr>
        <tr>
          <td>32173</td>
          <td>
            <a href="#spec-of-signExtend64From32">signExtend64From32</a>
          </td>
          <td>Sign Extend 32-bit</td>
        </tr>
        <tr>
          <td>32174</td>
          <td>
            <a href="#spec-of-signExtend64From8">signExtend64From8</a>
          </td>
          <td>Sign Extend 8-bit</td>
        </tr>
        <tr>
          <td>32175</td>
          <td>
            <a href="#spec-of-storeFloat32ToMemory">storeFloat32ToMemory</a>
          </td>
          <td>Store Float32 in memory</td>
        </tr>
        <tr>
          <td>32176</td>
          <td>
            <a href="#spec-of-storeFloat64ToMemory">storeFloat64ToMemory</a>
          </td>
          <td>Store Float64 in memory</td>
        </tr>
        <tr>
          <td>32177</td>
          <td>
            <a href="#spec-of-storeInt16ToMemory">storeInt16ToMemory</a>
          </td>
          <td>Store UInt16 in memory</td>
        </tr>
        <tr>
          <td>32178</td>
          <td>
            <a href="#spec-of-storeInt32ToMemory">storeInt32ToMemory</a>
          </td>
          <td>Store Int32 in memory</td>
        </tr>
        <tr>
          <td>32179</td>
          <td>
            <a href="#spec-of-storeInt64ToMemory">storeInt64ToMemory</a>
          </td>
          <td>Store Int64 in memory</td>
        </tr>
        <tr>
          <td>32180</td>
          <td>
            <a href="#spec-of-storeInt8ToMemory">storeInt8ToMemory</a>
          </td>
          <td>Store UInt8 in memory</td>
        </tr>
        <tr>
          <td>32181</td>
          <td>
            <a href="#spec-of-storeLocalFloat32">storeLocalFloat32</a>
          </td>
          <td>Store single precision float in the stack frame</td>
        </tr>
        <tr>
          <td>32182</td>
          <td>
            <a href="#spec-of-storeLocalFloat64">storeLocalFloat64</a>
          </td>
          <td>Store double precision float in the stack frame</td>
        </tr>
        <tr>
          <td>32183</td>
          <td>
            <a href="#spec-of-storeLocalInt16">storeLocalInt16</a>
          </td>
          <td>Store I16 to stack frame</td>
        </tr>
        <tr>
          <td>32184</td>
          <td>
            <a href="#spec-of-storeLocalInt32">storeLocalInt32</a>
          </td>
          <td>Store I32 to stack frame</td>
        </tr>
        <tr>
          <td>32185</td>
          <td>
            <a href="#spec-of-storeLocalInt64">storeLocalInt64</a>
          </td>
          <td>Store I64 to stack frame</td>
        </tr>
        <tr>
          <td>32186</td>
          <td>
            <a href="#spec-of-storeLocalInt8">storeLocalInt8</a>
          </td>
          <td>Store I8 to stack frame</td>
        </tr>
        <tr>
          <td>32187</td>
          <td>
            <a href="#spec-of-storeLocalPointer">storeLocalPointer</a>
          </td>
          <td>Store pointer in the stack frame</td>
        </tr>
        <tr>
          <td>32188</td>
          <td>
            <a href="#spec-of-storePointerToMemory">storePointerToMemory</a>
          </td>
          <td>Store a pointer in memory</td>
        </tr>
        <tr>
          <td>32189</td>
          <td>
            <a href="#spec-of-sub32">sub32</a>
          </td>
          <td>Integer Subtraction</td>
        </tr>
        <tr>
          <td>32190</td>
          <td>
            <a href="#spec-of-sub64">sub64</a>
          </td>
          <td>Integer Subtraction</td>
        </tr>
        <tr>
          <td>32191</td>
          <td>
            <a href="#spec-of-truncate32To16">truncate32To16</a>
          </td>
          <td>Truncate 32-bit to 16-bit integer</td>
        </tr>
        <tr>
          <td>32192</td>
          <td>
            <a href="#spec-of-truncate32To8">truncate32To8</a>
          </td>
          <td>Truncate 32-bit to 8-bit integer</td>
        </tr>
        <tr>
          <td>32193</td>
          <td>
            <a href="#spec-of-truncate64To16">truncate64To16</a>
          </td>
          <td>Truncate 64-bit to 16-bit integer</td>
        </tr>
        <tr>
          <td>32194</td>
          <td>
            <a href="#spec-of-truncate64To32">truncate64To32</a>
          </td>
          <td>Truncate 64-bit to 32-bit integer</td>
        </tr>
        <tr>
          <td>32195</td>
          <td>
            <a href="#spec-of-truncate64To8">truncate64To8</a>
          </td>
          <td>Truncate 64-bit to 8-bit integer</td>
        </tr>
        <tr>
          <td>32196</td>
          <td>
            <a href="#spec-of-udiv32">udiv32</a>
          </td>
          <td>Integer Unsigned division</td>
        </tr>
        <tr>
          <td>32197</td>
          <td>
            <a href="#spec-of-udiv64">udiv64</a>
          </td>
          <td>Integer Unsigned division</td>
        </tr>
        <tr>
          <td>32198</td>
          <td>
            <a href="#spec-of-uint32Great">uint32Great</a>
          </td>
          <td>UInt32 Great Than</td>
        </tr>
        <tr>
          <td>32199</td>
          <td>
            <a href="#spec-of-uint32GreatEqual">uint32GreatEqual</a>
          </td>
          <td>UInt32 Great or Equal Than</td>
        </tr>
        <tr>
          <td>32200</td>
          <td>
            <a href="#spec-of-uint32Less">uint32Less</a>
          </td>
          <td>UInt32 Less Than</td>
        </tr>
        <tr>
          <td>32201</td>
          <td>
            <a href="#spec-of-uint32LessEqual">uint32LessEqual</a>
          </td>
          <td>UInt32 Less or Equal Than</td>
        </tr>
        <tr>
          <td>32202</td>
          <td>
            <a href="#spec-of-uint32ToFloat32">uint32ToFloat32</a>
          </td>
          <td>UInt32 to Float32</td>
        </tr>
        <tr>
          <td>32203</td>
          <td>
            <a href="#spec-of-uint32ToFloat64">uint32ToFloat64</a>
          </td>
          <td>UInt32 to Float64</td>
        </tr>
        <tr>
          <td>32204</td>
          <td>
            <a href="#spec-of-uint64Great">uint64Great</a>
          </td>
          <td>UInt32 Great Than</td>
        </tr>
        <tr>
          <td>32205</td>
          <td>
            <a href="#spec-of-uint64GreatEqual">uint64GreatEqual</a>
          </td>
          <td>UInt64 Great or Equal Than</td>
        </tr>
        <tr>
          <td>32206</td>
          <td>
            <a href="#spec-of-uint64Less">uint64Less</a>
          </td>
          <td>UInt64 Less Than</td>
        </tr>
        <tr>
          <td>32207</td>
          <td>
            <a href="#spec-of-uint64LessEqual">uint64LessEqual</a>
          </td>
          <td>UInt64 Less or Equal Than</td>
        </tr>
        <tr>
          <td>32208</td>
          <td>
            <a href="#spec-of-uint64ToFloat32">uint64ToFloat32</a>
          </td>
          <td>UInt64 to Float32</td>
        </tr>
        <tr>
          <td>32209</td>
          <td>
            <a href="#spec-of-uint64ToFloat64">uint64ToFloat64</a>
          </td>
          <td>UInt64 to Float64</td>
        </tr>
        <tr>
          <td>32210</td>
          <td>
            <a href="#spec-of-umul32">umul32</a>
          </td>
          <td>Integer Unsigned Multiplication</td>
        </tr>
        <tr>
          <td>32211</td>
          <td>
            <a href="#spec-of-umul64">umul64</a>
          </td>
          <td>Integer Unsigned Multiplication</td>
        </tr>
        <tr>
          <td>32212</td>
          <td>
            <a href="#spec-of-unlockRegisters">unlockRegisters</a>
          </td>
          <td>Unlock Registers</td>
        </tr>
        <tr>
          <td>32213</td>
          <td>
            <a href="#spec-of-unlockVM">unlockVM</a>
          </td>
          <td>Unlock VM</td>
        </tr>
        <tr>
          <td>32214</td>
          <td>
            <a href="#spec-of-urem32">urem32</a>
          </td>
          <td>Integer Unsigned remainder</td>
        </tr>
        <tr>
          <td>32215</td>
          <td>
            <a href="#spec-of-urem64">urem64</a>
          </td>
          <td>Integer Unsigned remainder</td>
        </tr>
        <tr>
          <td>32216</td>
          <td>
            <a href="#spec-of-xor32">xor32</a>
          </td>
          <td>Bitwise Xor</td>
        </tr>
        <tr>
          <td>32217</td>
          <td>
            <a href="#spec-of-xor64">xor64</a>
          </td>
          <td>Bitwise Xor</td>
        </tr>
        <tr>
          <td>32218</td>
          <td>
            <a href="#spec-of-zeroExtend32From16">zeroExtend32From16</a>
          </td>
          <td>Zero Extend 16-bit</td>
        </tr>
        <tr>
          <td>32219</td>
          <td>
            <a href="#spec-of-zeroExtend32From8">zeroExtend32From8</a>
          </td>
          <td>Zero Extend 8-bit</td>
        </tr>
        <tr>
          <td>32220</td>
          <td>
            <a href="#spec-of-zeroExtend64From16">zeroExtend64From16</a>
          </td>
          <td>Sign Extend 16-bit</td>
        </tr>
        <tr>
          <td>32221</td>
          <td>
            <a href="#spec-of-zeroExtend64From32">zeroExtend64From32</a>
          </td>
          <td>Sign Extend 32-bit</td>
        </tr>
        <tr>
          <td>32222</td>
          <td>
            <a href="#spec-of-zeroExtend64From8">zeroExtend64From8</a>
          </td>
          <td>Zero Extend 8-bit</td>
        </tr>
        <tr>
          <td>32223</td>
          <td>
            <a href="#spec-of-instantiateIndexable32Oop">instantiateIndexable32Oop</a>
          </td>
          <td>Instantiate an oop class</td>
        </tr>
        <tr>
          <td>32224</td>
          <td>
            <a href="#spec-of-instantiateIndexableOop">instantiateIndexableOop</a>
          </td>
          <td>Instantiate an indexable class</td>
        </tr>
        <tr>
          <td>32225</td>
          <td>
            <a href="#spec-of-instantiateOop">instantiateOop</a>
          </td>
          <td>Instantiate an oop class</td>
        </tr>
        <tr>
          <td>32226</td>
          <td>
            <a href="#spec-of-loadObjectAt">loadObjectAt</a>
          </td>
          <td>Load an object field.</td>
        </tr>
        <tr>
          <td>32227</td>
          <td>
            <a href="#spec-of-loadObjectField">loadObjectField</a>
          </td>
          <td>Load an object field.</td>
        </tr>
        <tr>
          <td>0</td>
          <td>
            <a href="#spec-of-boolean32ToOop">boolean32ToOop</a>
          </td>
          <td>Boolean to Oop</td>
        </tr>
        <tr>
          <td>1</td>
          <td>
            <a href="#spec-of-boolean64ToOop">boolean64ToOop</a>
          </td>
          <td>Boolean to Oop</td>
        </tr>
        <tr>
          <td>2</td>
          <td>
            <a href="#spec-of-float32ToOop">float32ToOop</a>
          </td>
          <td>float32 to Opp</td>
        </tr>
        <tr>
          <td>3</td>
          <td>
            <a href="#spec-of-float64ToOop">float64ToOop</a>
          </td>
          <td>float64 to Opp</td>
        </tr>
        <tr>
          <td>4</td>
          <td>
            <a href="#spec-of-int32ToOop">int32ToOop</a>
          </td>
          <td>Int32 to Opp</td>
        </tr>
        <tr>
          <td>5</td>
          <td>
            <a href="#spec-of-int64ToOop">int64ToOop</a>
          </td>
          <td>Int32 to Opp</td>
        </tr>
        <tr>
          <td>6</td>
          <td>
            <a href="#spec-of-pointerToOop">pointerToOop</a>
          </td>
          <td>Pointer to Oop</td>
        </tr>
        <tr>
          <td>7</td>
          <td>
            <a href="#spec-of-pointerToOopReinterprer">pointerToOopReinterprer</a>
          </td>
          <td>Casts Pointer to Oop Reinterpret</td>
        </tr>
        <tr>
          <td>8</td>
          <td>
            <a href="#spec-of-smallInt32ToOop">smallInt32ToOop</a>
          </td>
          <td>SmallInteger32 to Opp</td>
        </tr>
        <tr>
          <td>9</td>
          <td>
            <a href="#spec-of-uint32ToOop">uint32ToOop</a>
          </td>
          <td>UInt32 to Opp</td>
        </tr>
        <tr>
          <td>10</td>
          <td>
            <a href="#spec-of-uint64ToOop">uint64ToOop</a>
          </td>
          <td>UInt64 to Opp</td>
        </tr>
      </table>
    </div>
    <div id="instruction-specs">
      <h2>Lowcode Instruction Specification</h2>
      <div class="instruction-spec" id="spec-of-oopEqual">
        <h3>[30000] oopEqual - Oop Equality</h3>
        <p>Oop identity comparison.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Object</td><td/></tr>
            <tr><td>second</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpNonZero: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first = second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopNotEqual">
        <h3>[30001] oopNotEqual - Oop Not Equality</h3>
        <p>Oop not identity comparison.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Object</td><td/></tr>
            <tr><td>second</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpZero: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first ~= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeObjectField">
        <h3>[30002] storeObjectField - Store an object field</h3>
        <p>This instruction stores an object into a field of an object.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>fieldIndex</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
            <tr><td>value</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcStore: value object: object field: fieldIndex.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            objectMemory storePointer: fieldIndex ofObject: object withValue: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeObjectFieldAt">
        <h3>[30003] storeObjectFieldAt - Store an object field</h3>
        <p>This instruction stores an object into a field of an object.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
            <tr><td>fieldIndex</td><td>Int32</td><td/></tr>
            <tr><td>value</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcStore: value object: object at: fieldIndex.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            objectMemory storePointer: fieldIndex ofObject: object withValue: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-byteSizeOf">
        <h3>[31000] byteSizeOf - Byte size of object</h3>
        <p>It tells the number of variable bytes of an object</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcByteSizeOf: object to: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self byteSizeOf: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-firstFieldPointer">
        <h3>[31001] firstFieldPointer - First Fixed Field</h3>
        <p>Loads the first fixed field address of an object into a register.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcFirstFieldPointer: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointer := objectMemory firstFixedField: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-firstIndexableFieldPointer">
        <h3>[31002] firstIndexableFieldPointer - First Indexable Field</h3>
        <p>Loads the first indexable field address of an object into a register.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcFirstIndexableFieldPointer: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointer := objectMemory firstIndexableField: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-isBytes">
        <h3>[31003] isBytes - Is bytes object</h3>
        <p>It tells if an object is bytes variable.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcIsBytes: object to: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (objectMemory isBytes: object) ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-isFloatObject">
        <h3>[31004] isFloatObject - Is float object</h3>
        <p>It tells if an object is a float.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcIsFloatObject: object to: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (objectMemory isFloatObject: object) ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-isIndexable">
        <h3>[31005] isIndexable - Is indexable object</h3>
        <p>It tells if an object is an indexable.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcIsIndexable: object to: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (objectMemory isIndexable: object) ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-isIntegerObject">
        <h3>[31006] isIntegerObject - Is integer object</h3>
        <p>It tells if an object is an integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcIsIntegerObject: object to: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (objectMemory isIntegerObject: object) ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-isPointers">
        <h3>[31007] isPointers - Is pointers object</h3>
        <p>It tells if an object contains pointers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcIsPointers: object to: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (objectMemory isPointers: object) ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-isWords">
        <h3>[31008] isWords - Is Words object</h3>
        <p>It tells if an object is words variable.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcIsWords: object to: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (objectMemory isWords: object) ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-isWordsOrBytes">
        <h3>[31009] isWordsOrBytes - Is bytes object</h3>
        <p>It tells if an object is bytes variable.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcIsWordsOrBytes: object to: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (objectMemory isWordsOrBytes: object) ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopSmallIntegerToInt32">
        <h3>[31010] oopSmallIntegerToInt32 - Oop to Int</h3>
        <p>It decodes an Oop representing a small integer into an integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genConvertSmallIntegerToIntegerInReg: object.
            self ssPushNativeRegister: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := objectMemory integerValueOf: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopSmallIntegerToInt64">
        <h3>[31011] oopSmallIntegerToInt64 - Oop to Int</h3>
        <p>It decodes an Oop representing a small integer boolean into a64-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := objectMemory integerValueOf: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            objectRepresentation genConvertSmallIntegerToIntegerInReg: object.
            self MoveCq: 0 R: valueHigh.
            self ssPushRegister: object secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            objectRepresentation genConvertSmallIntegerToIntegerInReg: object.
            self ssPushNativeRegister: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToBoolean32">
        <h3>[31012] oopToBoolean32 - Oop to Boolean</h3>
        <p>Decodes an Oop representing a boolean into an integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self booleanValueOf: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self annotate: (self SubCw: objectMemory falseObject R: object) objRef: objectMemory falseObject.
            self ssPushNativeRegister: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToBoolean64">
        <h3>[31013] oopToBoolean64 - Oop to Boolean</h3>
        <p>Decodes an Oop representing a boolean into an integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self booleanValueOf: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self MoveCq: 0 R: valueHigh.
            self annotate: (self SubCw: objectMemory falseObject R: object) objRef: objectMemory falseObject.
            self ssPushRegister: object secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self annotate: (self SubCw: objectMemory falseObject R: object) objRef: objectMemory falseObject.
            self ssPushNativeRegister: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToFloat32">
        <h3>[31014] oopToFloat32 - Oop to Int</h3>
        <p>
            It decodes an Oop representing floating point number into a single
            precision IEEE-754 floating point number.
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcOop: object toFloat32: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self floatValueOf: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToFloat64">
        <h3>[31015] oopToFloat64 - Oop to Int</h3>
        <p>
            It decodes an Oop representing floating point number into a double
            precision IEEE-754 floating point number.
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcOop: object toFloat64: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self floatValueOf: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToInt32">
        <h3>[31016] oopToInt32 - Oop to Int</h3>
        <p>It decodes an Oop an integer into signed 32-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
        	self ssFlushAll.
            objectRepresentation genLcOopToInt32: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self signed32BitValueOf: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToInt64">
        <h3>[31017] oopToInt64 - Oop to Int</h3>
        <p>It decodes an Oop representing a signed integer into a 64-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self signed64BitValueOf: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcOop: object toInt64: valueLow highPart: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcOopToInt64: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToPointer">
        <h3>[31018] oopToPointer - Oop to Pointer</h3>
        <p>Extracts a pointer encoded in an indexable such as NBExternalAddress.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcOopToPointer: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointer := self pointerAtPointer: (objectMemory firstIndexableField: object).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToPointerReinterpret">
        <h3>[31019] oopToPointerReinterpret - Cast Oop to Pointer Reinterpret</h3>
        <p>Reinterpret casts an Oop into a pointer.
        </p>
        <span class="warning">WARNING: Reinterpret casts an Oop into a pointer.
        </span>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            "TODO: Generate a nop here"
            self ssPushNativeRegister: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointer := self cCoerce: object to: 'char*'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToUInt32">
        <h3>[31020] oopToUInt32 - Oop to Int</h3>
        <p>It decodes an Oop representing an integer into an unsigned 32-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
        	self ssFlushAll.
            objectRepresentation genLcOopToUInt32: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self positive32BitValueOf: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-oopToUInt64">
        <h3>[31021] oopToUInt64 - Oop to Int</h3>
        <p>It decodes an Oop representing an unsigned integer into a 64-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self positive64BitValueOf: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcOop: object toUInt64: valueLow highPart: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcOopToUInt64: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pin">
        <h3>[31022] pin - Pin Object</h3>
        <p>Pins an Oop pointed object</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            objectMemory pinObject: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-unpin">
        <h3>[31023] unpin - Unpin Object</h3>
        <p>Unpins an Oop pointed object</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            objectMemory unpinObject: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-add32">
        <h3>[32000] add32 - Integer Addition</h3>
        <p>It performs integer addition without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self AddR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first + second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-add64">
        <h3>[32001] add64 - Integer Addition</h3>
        <p>It performs integer addition without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first + second.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self AddR: secondLow R: firstLow.
            self AddcR: secondHigh R: firstHigh.
			self ssPushRegister: firstLow secondRegister: firstHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self AddR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-alloca32">
        <h3>[32002] alloca32 - Alloca</h3>
        <p>
            It allocates variable sized memory in the stack.
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>size</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveAw: coInterpreter nativeStackPointerAddress R: TempReg.
            self SubR: size R: TempReg.
            self AndCq: -16 R: TempReg.

            self MoveR: TempReg R: size.
            self MoveR: size Aw: coInterpreter nativeStackPointerAddress.
            self ssPushNativeRegister: size.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            nativeStackPointer := self cCoerce:
                            ((self cCoerce: nativeStackPointer - size to: 'size_t') bitAnd: -16)
                        to: 'char*'.
            pointer := nativeStackPointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-alloca64">
        <h3>[32003] alloca64 - Alloca</h3>
        <p>
            It allocates variable sized memory in the stack.
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>size</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            nativeStackPointer := nativeStackPointer - size.
            pointer := nativeStackPointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self SubR: sizeLow R: SPReg.
            self MoveR: SPReg R: sizeLow.
            self ssPushNativeRegister: sizeLow.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self SubR: size R: SPReg.
            self MoveR: SPReg R: size.
            self ssPushNativeRegister: size.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-and32">
        <h3>[32004] and32 - Bitwise And</h3>
        <p>It performs a bitwise and operation.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self AndR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first bitAnd: second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-and64">
        <h3>[32005] and64 - Bitwise And</h3>
        <p>Performs a bitwise and operation.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first bitAnd: second.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self AndR: secondLow R: firstLow.
            self AndR: secondHigh R: firstHigh.
            self ssPushRegister: firstLow secondRegister: firstHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self AndR: second R: first.
            self ssPushNativeRegister: first.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-arithmeticRightShift32">
        <h3>[32006] arithmeticRightShift32 - Arithmetic Right Shift</h3>
        <p>Performs an arithmetic right shifting.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
            <tr><td>shiftAmount</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ArithmeticShiftRightR: shiftAmount R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value &gt;&gt; shiftAmount.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-arithmeticRightShift64">
        <h3>[32007] arithmeticRightShift64 - Arithmetic Right Shift</h3>
        <p>Performs an arithmetic right shifting.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
            <tr><td>shiftAmount</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value &gt;&gt; shiftAmount.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-beginCall">
        <h3>[32008] beginCall - Begins a function call.</h3>
        <p>Begins a function call</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>alignment</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self beginHighLevelCall: alignment.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            hostPlatformStoredSP := hostPlatformSP.
            hostPlatformSP := self cCoerce:
                            ((self cCoerce: hostPlatformSP to: 'size_t') bitAnd: alignment negated)
                        to: 'char*'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-callArgumentFloat32">
        <h3>[32009] callArgumentFloat32 - Push Float32 call argument</h3>
        <p>Pushes a 32-bit integer to the call stack.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>argumentValue</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: DPFPReg0.
	        self ssNativePop: 1.
            self MoveRs: DPFPReg0 M32: BytesPerWord negated r: SPReg.
            self SubCq: BytesPerWord R: SPReg.
            currentCallCleanUpSize := currentCallCleanUpSize + BytesPerWord.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCallArgumentFloat32: argumentValue.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-callArgumentFloat64">
        <h3>[32010] callArgumentFloat64 - Push Float64 call argument</h3>
        <p>Pushes a 64-bit integer to the call stack.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>argumentValue</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: DPFPReg0.
	        self ssNativePop: 1.
            self MoveRd: DPFPReg0 M64: -8 r: SPReg.
            self SubCq: 8 R: SPReg.
            currentCallCleanUpSize := currentCallCleanUpSize + 8.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCallArgumentFloat64: argumentValue.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-callArgumentInt32">
        <h3>[32011] callArgumentInt32 - Pushes Int32 call argument</h3>
        <p>Pushes a 32-bit integer to the call stack.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.
            self PushR: TempReg.
            currentCallCleanUpSize := currentCallCleanUpSize + BytesPerWord.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCallArgumentInt32: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-callArgumentInt64">
        <h3>[32012] callArgumentInt64 - Push Int64 call argument</h3>
        <p>Pushes a 64-bit integer to the call stack.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
            BytesPerWord = 4 ifTrue: [
	            self ssNativeTop nativeStackPopToReg: TempReg secondReg: ReceiverResultReg.
	            self ssNativePop: 1.
                self PushR: TempReg.
                self PushR: ReceiverResultReg.

                currentCallCleanUpSize := currentCallCleanUpSize + 8.
            ] ifFalse: [
	            self ssNativeTop nativeStackPopToReg: TempReg.
	            self ssNativePop: 1.
                self PushR: TempReg.

                currentCallCleanUpSize := currentCallCleanUpSize + BytesPerWord.
            ].
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCallArgumentInt64: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-callArgumentPointer">
        <h3>[32013] callArgumentPointer - Push Pointer call argument</h3>
        <p>Pushes a pointer to the call stack.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointerValue</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.
            self PushR: TempReg.
            currentCallCleanUpSize := currentCallCleanUpSize + BytesPerWord.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCallArgumentPointer: pointerValue.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-callArgumentStructure">
        <h3>[32014] callArgumentStructure - Push structure call argument</h3>
        <p>Pushes a pointer to the call stack.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>structureSize</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>structurePointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
            "Fetch the pointer"
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.

            "Allocate space"
            self SubCq: currentCallCleanUpSize R: SPReg .

            "Copy the structure"
            backEnd genMemCopy: TempReg to: SPReg constantSize: extA.
            extA := 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCallArgumentStructure: structurePointer Sized: structureSize.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-callInstruction">
        <h3>[32015] callInstruction - Low-Level call</h3>
        <p>This instruction performs a Low-Level call.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CallRT: function.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-callPhysical">
        <h3>[32016] callPhysical - Push Int32 from physical register</h3>
        <p>Pushes an Int32 from a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CallR: registerID.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-checkSessionIdentifier">
        <h3>[32017] checkSessionIdentifier - Pushes true or false if the session ID matches</h3>
        <p>Computes a new pointer by offseting an old one.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>expectedSession</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantInt32: (expectedSession = coInterpreter getThisSessionID ifTrue: [1] ifFalse: [0]).
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (expectedSession = self getThisSessionID) ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-compareAndSwap32">
        <h3>[32018] compareAndSwap32 - Compare and Swap 32 Bits</h3>
        <p>
            Compares a 32 bit value in memory with a reference value,
            if they are equal it swaps the memory location with a new value.
            It returns the old value in the memory location.
            This operation is guaranteed to be atomic.
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>check</td><td>Pointer</td><td/></tr>
            <tr><td>oldValue</td><td>Int32</td><td/></tr>
            <tr><td>newValue</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-div32">
        <h3>[32019] div32 - Integer Signed Division</h3>
        <p>Integer signed division without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self DivR: second R: first Quo: first Rem: second.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first // second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-div64">
        <h3>[32020] div64 - Integer Signed Division</h3>
        <p>Integer signed division without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first // second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-duplicateFloat32">
        <h3>[32021] duplicateFloat32 - Duplicate Float32</h3>
        <p>It duplicates the Float32 present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>dup1</td><td>Float32</td><td/></tr>
            <tr><td>dup2</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveRs: value Rs: dup2.
            self ssPushRegisterSingleFloat: value;
                ssPushRegisterSingleFloat: dup2.
        </code>
        </div>
        <div class="semantic">
          <h4>Pharo/VirtualCPU Semantics</h4>
          <code>
            dup1 := value.
            dup2 := value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            dup1 := value.
            dup2 := value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-duplicateFloat64">
        <h3>[32022] duplicateFloat64 - Duplicate Float64</h3>
        <p>It duplicates the Float64 present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>dup1</td><td>Float64</td><td/></tr>
            <tr><td>dup2</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveRd: value Rd: dup2.
            self ssPushRegisterDoubleFloat: value;
                ssPushRegisterDoubleFloat: dup2.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            dup1 := value.
            dup2 := value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-duplicateInt32">
        <h3>[32023] duplicateInt32 - Duplicate Int32</h3>
        <p>It duplicates the Int32 present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>dup1</td><td>Int32</td><td/></tr>
            <tr><td>dup2</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveR: value R: dup2.
            self ssPushNativeRegister: value;
                ssPushNativeRegister: dup2.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            dup1 := value.
            dup2 := value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-duplicateInt64">
        <h3>[32024] duplicateInt64 - Duplicate Int64</h3>
        <p>It duplicates the Int64 present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>dup1</td><td>Int64</td><td/></tr>
            <tr><td>dup2</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            dup1 := value.
            dup2 := value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self MoveR: value R: dup2.
            self ssPushNativeRegister: value.
            self ssPushNativeRegister: dup2.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self MoveR: valueLow R: dup2Low.
            self MoveR: valueHigh R: dup2High.
            self ssPushRegister: valueLow secondRegister: valueHigh.
            self ssPushRegister: dup2Low secondRegister: dup2High.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-duplicatePointer">
        <h3>[32025] duplicatePointer - Duplicate Pointer</h3>
        <p>It duplicates the pointer present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointerValue</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>dup1</td><td>Pointer</td><td/></tr>
            <tr><td>dup2</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveR: pointerValue R: dup2.
            self ssPushNativeRegister: pointerValue;
                ssPushNativeRegister: dup2.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            dup1 := pointerValue.
            dup2 := pointerValue.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-effectiveAddress32">
        <h3>[32026] effectiveAddress32 - Compute Effective Address 32-bit</h3>
        <p>It computes an effective address 32-bit factors.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>base</td><td>Pointer</td><td/></tr>
            <tr><td>index</td><td>Int32</td><td/></tr>
            <tr><td>scale</td><td>Int32</td><td/></tr>
            <tr><td>offset</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MulR: scale R: index.
            self AddR: index R: base.
            self AddR: offset R: base.
            self ssPushNativeRegister: base.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := base + (index*scale) + offset.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-effectiveAddress64">
        <h3>[32027] effectiveAddress64 - Compute Effective Address 64-bit</h3>
        <p>It computes an effective address using 64-bit factors.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>base</td><td>Pointer</td><td/></tr>
            <tr><td>index</td><td>Int64</td><td/></tr>
            <tr><td>scale</td><td>Int64</td><td/></tr>
            <tr><td>offset</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := base + (index*scale) + offset.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-endCall">
        <h3>[32028] endCall - End a function call.</h3>
        <p>It ends a function call by cleaning the stack.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self endHighLevelCallWithCleanup.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            hostPlatformSP := hostPlatformStoredSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-endCallNoCleanup">
        <h3>[32029] endCallNoCleanup - End a function call.</h3>
        <p>It ends a function call without cleaning the stack.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self endHighLevelCallWithoutCleanup.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            "Nop"
            hostPlatformSP := hostPlatformSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32Add">
        <h3>[32030] float32Add - Float32 addition</h3>
        <p>It Performs the addition of two single precision floating point numbers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self AddRs: second Rs: first.
			self ssPushRegisterSingleFloat: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first + second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32Div">
        <h3>[32031] float32Div - Float32 division</h3>
        <p>It performs the division of two single precision floating point numbers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self DivRs: second Rs: first.
			self ssPushRegisterSingleFloat: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first / second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32Equal">
        <h3>[32032] float32Equal - Float32 Equality</h3>
        <p>Float32 equality.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRs: second Rs: first.
            falseJump := self JumpFPNotEqual: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first = second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32Great">
        <h3>[32033] float32Great - Float32 Great Than</h3>
        <p>Float32 great than relationship.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRs: second Rs: first.
            falseJump := self JumpFPLessOrEqual: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &gt; second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32GreatEqual">
        <h3>[32034] float32GreatEqual - Float32 Great or Equal Than</h3>
        <p>Float32 great or equal than relationship.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRs: second Rs: first.
            falseJump := self JumpFPLess: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &gt;= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32Less">
        <h3>[32035] float32Less - Float32 Less Than</h3>
        <p>Float32 less than relationship.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRs: second Rs: first.
            falseJump := self JumpFPGreaterOrEqual: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &lt; second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32LessEqual">
        <h3>[32036] float32LessEqual - Float32 Less or Eual Than</h3>
        <p>Float32 less or equal than relationship.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRs: second Rs: first.
            falseJump := self JumpFPGreater: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &lt;= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32Mul">
        <h3>[32037] float32Mul - Float32 multiplication</h3>
        <p>It performs the multiplication of two single precision floating point numbers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MulRs: second Rs: first.
			self ssPushRegisterSingleFloat: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first * second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32NotEqual">
        <h3>[32038] float32NotEqual - Float32 Inequality</h3>
        <p>Float32 not equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRs: second Rs: first.
            falseJump := self JumpFPEqual: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first ~= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32Sub">
        <h3>[32039] float32Sub - Float32 subtraction</h3>
        <p>It performs the subtraction of two single precision floating point numbers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float32</td><td/></tr>
            <tr><td>second</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self SubRs: second Rs: first.
			self ssPushRegisterSingleFloat: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first - second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32ToFloat64">
        <h3>[32040] float32ToFloat64 - Float32 to Float64</h3>
        <p>It converts a single precision floating point number into
                    a double precision floating point number
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>singleFloatValue</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>doubleResult</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertRs: singleFloatValue Rd: singleFloatValue.
            self ssPushRegisterDoubleFloat: singleFloatValue.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            doubleResult := self cCoerce: singleFloatValue to: 'double'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32ToInt32">
        <h3>[32041] float32ToInt32 - Float32 to Int32</h3>
        <p>It converts single precision floating point number into 32-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertRs: value R: result.
            self ssPushNativeRegister: result.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'sqInt'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32ToInt64">
        <h3>[32042] float32ToInt64 - Float32 to Int64</h3>
        <p>It converts a single precision floating point number into a 64-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'sqLong'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32ToUInt32">
        <h3>[32043] float32ToUInt32 - Float32 to UInt32</h3>
        <p>It converts single precision floating point number into 32-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertRs: value R: result.
            self ssPushNativeRegister: result.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'uint32_t'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32ToUInt64">
        <h3>[32044] float32ToUInt64 - Float32 to UInt64</h3>
        <p>It converts a single precision floating point number into a 64-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'uint64_t'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64Add">
        <h3>[32045] float64Add - Float64 addition</h3>
        <p>It performs the addition of two double precision floating point numbers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self AddRd: second Rd: first.
			self ssPushRegisterDoubleFloat: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first + second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64Div">
        <h3>[32046] float64Div - Float64 division</h3>
        <p>It performs the division of two double precision floating point numbers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self DivRd: second Rd: first.
			self ssPushRegisterDoubleFloat: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first / second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64Equal">
        <h3>[32047] float64Equal - Float64 Equality</h3>
        <p>Float64 equality.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRd: second Rd: first.
            falseJump := self JumpFPNotEqual: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first = second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64Great">
        <h3>[32048] float64Great - Float64 Great Than</h3>
        <p>Float64 great than relationship.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRd: second Rd: first.
            falseJump := self JumpFPLessOrEqual: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &gt; second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64GreatEqual">
        <h3>[32049] float64GreatEqual - Float64 Great or Equal Than</h3>
        <p>Float64 great or equal than relationship.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRd: second Rd: first.
            falseJump := self JumpFPLess: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &gt;= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64Less">
        <h3>[32050] float64Less - Float64 Less Than</h3>
        <p>Float64 less than relationship.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRd: second Rd: first.
            falseJump := self JumpFPGreaterOrEqual: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &lt; second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64LessEqual">
        <h3>[32051] float64LessEqual - Float64 Less or Equal Than</h3>
        <p>Float32 less or equal than relationship.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRd: second Rd: first.
            falseJump := self JumpFPGreater: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &lt;= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64Mul">
        <h3>[32052] float64Mul - Float64 multiplication</h3>
        <p>It performs the multiplication of two double precision floating point numbers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MulRd: second Rd: first.
			self ssPushRegisterDoubleFloat: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first * second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64NotEqual">
        <h3>[32053] float64NotEqual - Float64 Inequality</h3>
        <p>Float64 not equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpRd: second Rd: first.
            falseJump := self JumpFPEqual: 0.

            "True result"
            self MoveCq: 1 R: value.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: value.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first ~= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64Sub">
        <h3>[32054] float64Sub - Float64 subtraction</h3>
        <p>It performs the subtraction of two double precision floating point numbers.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Float64</td><td/></tr>
            <tr><td>second</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self SubRd: second Rd: first.
			self ssPushRegisterDoubleFloat: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first - second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64ToFloat32">
        <h3>[32055] float64ToFloat32 - Float64 to Float32</h3>
        <p>It converts a double precision floating point number into
                    a single precision floating point number
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>floatValue</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>singleFloatResult</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertRd: floatValue Rs: floatValue.
            self ssPushRegisterSingleFloat: floatValue.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            singleFloatResult := self cCoerce: floatValue to: 'float'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64ToInt32">
        <h3>[32056] float64ToInt32 - Float64 to Int32</h3>
        <p>It converts double precision floating point number into a 32-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>floatValue</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>int32Result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertRd: floatValue R: int32Result.
            self ssPushNativeRegister: int32Result.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            int32Result := self cCoerce: floatValue to: 'sqInt'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64ToInt64">
        <h3>[32057] float64ToInt64 - Float64 to Int64</h3>
        <p>It converts a double precision floating point number into a 64-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>floatValue</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>int64Result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            int64Result := self cCoerce: floatValue to: 'sqLong'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64ToUInt32">
        <h3>[32058] float64ToUInt32 - Float64 to UInt32</h3>
        <p>It converts double precision floating point number into a 32-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>floatValue</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>int64Result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertRd: floatValue R: int64Result.
            self ssPushNativeRegister: int64Result.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            int64Result := self cCoerce: floatValue to: 'uint32_t'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64ToUInt64">
        <h3>[32059] float64ToUInt64 - Float64 to UInt64</h3>
        <p>It converts a double precision floating point number into a 64-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>floatValue</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>int64Result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            int64Result := self cCoerce: floatValue to: 'uint64_t'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-free">
        <h3>[32060] free - Frees Memory</h3>
        <p>
            Frees previously allocated memory in the heap.
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            pointer ~= ReceiverResultReg ifTrue: [self MoveR: pointer R: ReceiverResultReg ].

            self CallRT: ceFreeTrampoline.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self free: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32Equal">
        <h3>[32061] int32Equal - Int32 Equality</h3>
        <p>Int32 equality.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpNonZero: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first = second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32Great">
        <h3>[32062] int32Great - Int32 Great Than</h3>
        <p>Int32 great than.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpLessOrEqual: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &gt; second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32GreatEqual">
        <h3>[32063] int32GreatEqual - Int32 Great or EqualThan</h3>
        <p>Int32 great or equal than.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpLess: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &gt;= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32Less">
        <h3>[32064] int32Less - Int32 Less Than</h3>
        <p>Int32 not equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpGreaterOrEqual: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &lt; second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32LessEqual">
        <h3>[32065] int32LessEqual - Int32 Less or Equal Than</h3>
        <p>Int32 less equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpGreater: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &lt;= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32NotEqual">
        <h3>[32066] int32NotEqual - Int32 Inequality</h3>
        <p>Float32 not equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpZero: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first ~= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32ToFloat32">
        <h3>[32067] int32ToFloat32 - Int32 to Float32</h3>
        <p>Converts an unsigned integer into a floating point number.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertR: value Rs: result.
            self ssPushRegisterSingleFloat: result.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'float'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32ToFloat64">
        <h3>[32068] int32ToFloat64 - Int32 to Float64</h3>
        <p>Converts an unsigned integer into a floating point number.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertR: value Rd: result.
            self ssPushRegisterDoubleFloat: result.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'double'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32ToPointer">
        <h3>[32069] int32ToPointer - Int32 to Pointer</h3>
        <p>It converts a 32-bit integer into a pointer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            "TODO: Perform a NOP here"
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'uintptr_t'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64Equal">
        <h3>[32070] int64Equal - Int64 Equality</h3>
        <p>Int64 equality.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first = second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self CmpR: secondHigh R: firstHigh.
            falseJump := self JumpNonZero: 0.
            self CmpR: secondLow R: firstLow.
            falseJump2 := self JumpNonZero: 0.

            "True result"
            self MoveCq: 1 R: firstLow.
            contJump := self Jump: 0.

            "False result"
            falseLabel := self MoveCq: 0 R: firstLow.
            falseJump jmpTarget: falseLabel.
            falseJump2 jmpTarget: falseLabel.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: firstLow.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpNonZero: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64Great">
        <h3>[32071] int64Great - Int64 Great Than</h3>
        <p>Int64 great than.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &gt; second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64GreatEqual">
        <h3>[32072] int64GreatEqual - Int64 Great or EqualThan</h3>
        <p>Int64 great or equal than.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &gt;= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64Less">
        <h3>[32073] int64Less - Int64 Less Than</h3>
        <p>Int64 not equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &lt; second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64LessEqual">
        <h3>[32074] int64LessEqual - Int64 Less or Equal Than</h3>
        <p>Int64 less equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first &lt;= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64NotEqual">
        <h3>[32075] int64NotEqual - Int64 Inequality</h3>
        <p>Float64 not equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first ~= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self CmpR: secondHigh R: firstHigh.
            falseJump := self JumpNonZero: 0.
            self CmpR: secondLow R: firstLow.
            falseJump2 := self JumpNonZero: 0.

            "False result"
            self MoveCq: 0 R: firstLow.
            contJump := self Jump: 0.

            "True result"
            falseLabel := self MoveCq: 1 R: firstLow.
            falseJump jmpTarget: falseLabel.
            falseJump2 jmpTarget: falseLabel.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: firstLow.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpNonZero: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64ToFloat32">
        <h3>[32076] int64ToFloat32 - Int64 to Float32</h3>
        <p>Converts an unsigned integer into a floating point number.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'float'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64ToFloat64">
        <h3>[32077] int64ToFloat64 - Int64 to Float64</h3>
        <p>Converts an unsigned integer into a floating point number.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'double'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64ToPointer">
        <h3>[32078] int64ToPointer - Int64 to Pointer</h3>
        <p>It converts a 64-bit integer into a pointer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce:
                        (self cCoerce: value to: 'intptr_t')
                       to: 'char*'.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ssPushNativeRegister: valueLow.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-leftShift32">
        <h3>[32079] leftShift32 - Left Shift</h3>
        <p>Performs a left shifting.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
            <tr><td>shiftAmount</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self LogicalShiftLeftR: shiftAmount R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value &lt;&lt; shiftAmount.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-leftShift64">
        <h3>[32080] leftShift64 - Left Shift</h3>
        <p>Performs a left shifting.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
            <tr><td>shiftAmount</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value &lt;&lt; shiftAmount.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadFloat32FromMemory">
        <h3>[32081] loadFloat32FromMemory - Load Float 32 from Memory</h3>
        <p>Loads a float 32 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveM32: 0 r: pointer Rs: value.
			self ssPushRegisterSingleFloat: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self singleFloatAtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadFloat64FromMemory">
        <h3>[32082] loadFloat64FromMemory - Load Float 64 from Memory</h3>
        <p>Loads a float 64 from.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveM64: 0 r: pointer Rd: value.
			self ssPushRegisterDoubleFloat: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self floatAtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadInt16FromMemory">
        <h3>[32083] loadInt16FromMemory - Load U16 from Memory</h3>
        <p>Loads an U16 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveM16: 0 r: pointer R: value.
            self SignExtend16R: value R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self int16AtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadInt32FromMemory">
        <h3>[32084] loadInt32FromMemory - Load I32 from Memory</h3>
        <p>Loads an I32 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveM32: 0 r: pointer R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self int32AtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadInt64FromMemory">
        <h3>[32085] loadInt64FromMemory - Load I64 from Memory</h3>
        <p>Loads an I64 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self int64AtPointer: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            "TODO: Check the endianness"
            self MoveM32: 0 r: pointer R: valueLow.
            self MoveM32: 4 r: pointer R: valueHigh.
			self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self MoveM64: 0 r: pointer R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadInt8FromMemory">
        <h3>[32086] loadInt8FromMemory - Load I8 from Memory</h3>
        <p>Loads an I8 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveM8: 0 r: pointer R: value.
            self SignExtend8R: value R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self int8AtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalAddress">
        <h3>[32087] loadLocalAddress - Load local address</h3>
        <p>It loads a local variable address in the stack</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: pointer.
            self ssPushNativeRegister: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointer := self framePointerOfNativeLocal: baseOffset in: localFP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalFloat32">
        <h3>[32088] loadLocalFloat32 - Load single precision float from stack</h3>
        <p>It loads a single precision float from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>floatValue</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM32: 0 r: TempReg Rs: floatValue.
			self ssPushRegisterSingleFloat: floatValue.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            floatValue := stackPages singleFloatAtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalFloat64">
        <h3>[32089] loadLocalFloat64 - Load double precision float from stack</h3>
        <p>It loads a double precision float from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>doubleValue</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM64: 0 r: TempReg Rd: doubleValue.
			self ssPushRegisterDoubleFloat: doubleValue.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            doubleValue := stackPages floatAtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalInt16">
        <h3>[32090] loadLocalInt16 - Load I16 from stack</h3>
        <p>It Loads an U16 from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM16: 0 r: TempReg R: value.
            self SignExtend16R: value R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := stackPages int16AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalInt32">
        <h3>[32091] loadLocalInt32 - Load I32 from stack</h3>
        <p>It Loads an U32 from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM32: 0 r: TempReg R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := stackPages int32AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalInt64">
        <h3>[32092] loadLocalInt64 - Load I64 from stack</h3>
        <p>It Loads an I64 from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := stackPages int64AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            "TODO: Check the endianness"
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM32: 0 r: TempReg R: valueLow.
            self MoveM32: 4 r: TempReg R: valueHigh.
			self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM64: 0 r: TempReg R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalInt8">
        <h3>[32093] loadLocalInt8 - Load I8 from stack</h3>
        <p>It Loads an U8 from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM8: 0 r: TempReg R: value.
            self SignExtend8R: value R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := stackPages int8AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalPointer">
        <h3>[32094] loadLocalPointer - Load pointer from stack</h3>
        <p>It loads a pointer from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointerResult</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveMw: 0 r: TempReg R: pointerResult.
			self ssPushNativeRegister: pointerResult.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointerResult := stackPages pointerAtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalUInt16">
        <h3>[32095] loadLocalUInt16 - Load U16 from stack</h3>
        <p>It Loads an U16 from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM16: 0 r: TempReg R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := stackPages uint16AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalUInt32">
        <h3>[32096] loadLocalUInt32 - Load U32 from stack</h3>
        <p>It Loads an U32 from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM32: 0 r: TempReg R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := stackPages uint32AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalUInt64">
        <h3>[32097] loadLocalUInt64 - Load U8 from stack</h3>
        <p>It Loads an U8 from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := stackPages uint64AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            "TODO: Check the endianness"
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM32: 0 r: TempReg R: valueLow.
            self MoveM32: 4 r: TempReg R: valueHigh.
			self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM64: 0 r: TempReg R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadLocalUInt8">
        <h3>[32098] loadLocalUInt8 - Load U8 from stack</h3>
        <p>It Loads an U8 from the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveM8: 0 r: TempReg R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := stackPages uint8AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP).
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadPointerFromMemory">
        <h3>[32099] loadPointerFromMemory - Load Pointer from Memory</h3>
        <p>Loads a pointer from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointerResult</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveMw: 0 r: pointer R: pointerResult.
			self ssPushNativeRegister: pointerResult.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointerResult := self pointerAtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadUInt16FromMemory">
        <h3>[32100] loadUInt16FromMemory - Load U16 from Memory</h3>
        <p>It loads an U16 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveM16: 0 r: pointer R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self uint16AtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadUInt32FromMemory">
        <h3>[32101] loadUInt32FromMemory - Load U32 from Memory</h3>
        <p>Loads an U32 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveM32: 0 r: pointer R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self uint32AtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadUInt64FromMemory">
        <h3>[32102] loadUInt64FromMemory - Load U64 from Memory</h3>
        <p>Loads an U64 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self uint64AtPointer: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            "TODO: Check the endianness"
            self MoveM32: 0 r: pointer R: valueLow.
            self MoveM32: 4 r: pointer R: valueHigh.
			self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self MoveM64: 0 r: pointer R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadUInt8FromMemory">
        <h3>[32103] loadUInt8FromMemory - Load U8 from Memory</h3>
        <p>Loads an U8 from memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveM8: 0 r: pointer R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self uint8AtPointer: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-localFrameSize">
        <h3>[32104] localFrameSize - Local Frame Size</h3>
        <p>This instruction is used to describe the size of the local frame.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>size</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self assert: needsFrame.
            hasNativeFrame := true.

            "Fetch the stack"
            self MoveAw: coInterpreter nativeStackPointerAddress R: TempReg.
            self AddCq: 1 R: TempReg.
            self MoveR: TempReg Mw: self frameOffsetOfPreviousNativeStackPointer r: FPReg.

            "Store the frame pointer"
            self SubCq: size R: TempReg.
            self MoveR: TempReg Mw: self frameOffsetOfNativeFramePointer r: FPReg.

            "Store the new stack pointer"
            self MoveR: TempReg Mw: self frameOffsetOfNativeStackPointer r: FPReg.

            "Allocate space for the locals"
            self SubCq: 1 + coInterpreter defaultNativeStackFrameSize R: TempReg.
            self MoveR: TempReg Aw: coInterpreter nativeStackPointerAddress.
            
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            "Store the previous stack pointer"
            self nativePreviousStackPointerIn: localFP put: nativeStackPointer + 1.

            "Make the frame pointer"
            nativeStackPointer := nativeStackPointer - size.
            self nativeFramePointerIn: localFP put: nativeStackPointer + 1.

            "Set the stack pointer"
            nativeSP := nativeStackPointer + 1.
            self nativeStackPointerIn: localFP put: nativeStackPointer + 1.

            "Reserve space for the native stack"
            nativeStackPointer := nativeStackPointer - self defaultNativeStackFrameSize.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-lockRegisters">
        <h3>[32105] lockRegisters - Lock Registers</h3>
        <p>
            Locks the CPU register. This tells the register allocator that the
            following instructions are going to modify some explicit CPU registers.
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-lockVM">
        <h3>[32106] lockVM - Lock VM</h3>
        <p>Locks the VM to the current thread.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-malloc32">
        <h3>[32107] malloc32 - Malloc</h3>
        <p>
            Allocates memory from heap
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>size</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            size ~= ReceiverResultReg ifTrue: [self MoveR: size R: ReceiverResultReg ].

            self CallRT: ceMallocTrampoline.

            self MoveR: TempReg R: pointer.
            self ssPushNativeRegister: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointer := self malloc: size.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-malloc64">
        <h3>[32108] malloc64 - Malloc</h3>
        <p>
            Allocates memory from heap
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>size</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            pointer := self malloc: size.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ssFlushAll.
            sizeLow ~= ReceiverResultReg ifTrue: [self MoveR: sizeLow R: ReceiverResultReg ].

            self CallRT: ceMallocTrampoline.

            self MoveR: TempReg R: pointer.
            self ssPushNativeRegister: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ssFlushAll.
            size ~= ReceiverResultReg ifTrue: [self MoveR: size R: ReceiverResultReg ].

            self CallRT: ceMallocTrampoline.

            self MoveR: TempReg R: pointer.
            self ssPushNativeRegister: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-memcpy32">
        <h3>[32109] memcpy32 - Copies a block of memory</h3>
        <p>Copies a block of memory</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>dest</td><td>Pointer</td><td/></tr>
            <tr><td>source</td><td>Pointer</td><td/></tr>
            <tr><td>size</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self mem: dest cp: source y: size.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            backEnd genMemCopy: source to: dest size: size.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-memcpy64">
        <h3>[32110] memcpy64 - Copies a block of memory</h3>
        <p>Copies a block of memory</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>dest</td><td>Pointer</td><td/></tr>
            <tr><td>source</td><td>Pointer</td><td/></tr>
            <tr><td>size</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self mem: dest cp: source y: size.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            backEnd genMemCopy: source to: dest size: sizeLow.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-memcpyFixed">
        <h3>[32111] memcpyFixed - Copies a block of memory</h3>
        <p>Copies a block of memory</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>size</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>dest</td><td>Pointer</td><td/></tr>
            <tr><td>source</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self mem: dest cp: source y: size.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            size = BytesPerWord ifTrue: [
                self MoveMw: 0 r: source R: TempReg.
                self MoveR: TempReg Mw: 0 r: dest.
            ] ifFalse: [
                self ssFlushAll.
                backEnd genMemCopy: source to: dest constantSize: size.
            ].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-moveFloat32ToPhysical">
        <h3>[32112] moveFloat32ToPhysical - Move Float32 To Physical Register</h3>
        <p>Moves a value into a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-moveFloat64ToPhysical">
        <h3>[32113] moveFloat64ToPhysical - Move Float64 Register To Physical Register</h3>
        <p>Moves the content of a logical register into a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-moveInt32ToPhysical">
        <h3>[32114] moveInt32ToPhysical - Move Int32  To Physical Register</h3>
        <p>Moves a value into a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-moveInt64ToPhysical">
        <h3>[32115] moveInt64ToPhysical - Move Int64 To Physical Register</h3>
        <p>Moves a value into a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-movePointerToPhysical">
        <h3>[32116] movePointerToPhysical - Move Pointer To Physical Register</h3>
        <p>Moves a value into a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointerValue</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-mul32">
        <h3>[32117] mul32 - Integer Signed Multiplication</h3>
        <p>Integer multiplication without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MulR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first * second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-mul64">
        <h3>[32118] mul64 - Integer Signed Multiplication</h3>
        <p>Integer multiplication without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first * second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-neg32">
        <h3>[32119] neg32 - Integer Negation</h3>
        <p>Integer negation.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self NegateR: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value negated.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-neg64">
        <h3>[32120] neg64 - Integer Negation</h3>
        <p>Integer negation.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value negated.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            "Two complement negation"
            self NotR: valueLow.
            self NotR: valueHigh.
            self AddCq: 1 R: valueLow.
            self AddcCq: 0 R: valueHigh.
			self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self NegateR: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-not32">
        <h3>[32121] not32 - Bitwise Not</h3>
        <p>Performs a bitwise not.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self NotR: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value bitXor: -1.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-not64">
        <h3>[32122] not64 - Bitwise Not</h3>
        <p>Performs a bitwise not.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value bitXor: -1.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self NotR: valueLow.
            self NotR: valueHigh.
            self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self NotR: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-or32">
        <h3>[32123] or32 - Bitwise Or</h3>
        <p>Performs a bitwise or operation.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self OrR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first bitOr: second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-or64">
        <h3>[32124] or64 - Bitwise Or</h3>
        <p>Performs a bitwise or operation.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first bitOr: second.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self OrR: secondLow R: firstLow.
            self OrR: secondHigh R: firstHigh.
            self ssPushRegister: firstLow secondRegister: firstHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self OrR: second R: first.
            self ssPushNativeRegister: first.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallFloat32">
        <h3>[32125] performCallFloat32 - Perform function call.</h3>
        <p>Performs a function with Float32 result</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
            self callSwitchToCStack.

            self MoveCw: extA R: TempReg.
            self CallRT: ceFFICalloutTrampoline.

            backEnd cFloatResultToRs: DPFPReg0.
            self ssPushRegisterSingleFloat: DPFPReg0.
            extA := 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self externalizeIPandSP.
            self LowcodeInterpreterCall: function Float32Result: result.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallFloat64">
        <h3>[32126] performCallFloat64 - Perform function call.</h3>
        <p>Performs a function with Float64 result</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
            self callSwitchToCStack.
            self MoveCw: extA R: TempReg.
            self CallRT: ceFFICalloutTrampoline.


            backEnd cFloatResultToRd: DPFPReg0.
            self ssPushRegisterDoubleFloat: DPFPReg0.
            extA := 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self externalizeIPandSP.
            self LowcodeInterpreterCall: function Float32Result: result.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallIndirectFloat32">
        <h3>[32127] performCallIndirectFloat32 - Perform indirect function call.</h3>
        <p>It performs an indirect function with Float32 result.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.

            self callSwitchToCStack.
            self CallRT: ceFFICalloutTrampoline.


            backEnd cFloatResultToRs: DPFPReg0.
            self ssPushRegisterSingleFloat: DPFPReg0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCall: function Float32Result: result.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallIndirectFloat64">
        <h3>[32128] performCallIndirectFloat64 - Perform indirect function call.</h3>
        <p>It erforms an indirect function with Float64 result.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.

            self callSwitchToCStack.
            self CallRT: ceFFICalloutTrampoline.

            backEnd cFloatResultToRd: DPFPReg0.
            self ssPushRegisterDoubleFloat: DPFPReg0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCall: function Float64Result: result.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallIndirectInt32">
        <h3>[32129] performCallIndirectInt32 - Perform indirect function call.</h3>
        <p>It performs an indirect function with I32 result.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.

            self callSwitchToCStack.
            self CallRT: ceFFICalloutTrampoline.


            self MoveR: backEnd cResultRegister R: ReceiverResultReg.
            self ssPushNativeRegister: ReceiverResultReg.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCall: function Int32Result: result.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallIndirectInt64">
        <h3>[32130] performCallIndirectInt64 - Perform indirect function call.</h3>
        <p>It performs an indirect function with I64 result.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.

            self callSwitchToCStack.
            self CallRT: ceFFICalloutTrampoline.

            BytesPerWord = 4 ifTrue: [
                self MoveR: backEnd cResultRegisterLow R: ReceiverResultReg.
                self MoveR: backEnd cResultRegisterHigh R: Arg0Reg.
                self ssPushRegister: ReceiverResultReg secondRegister: Arg0Reg.
            ] ifFalse: [
                self MoveR: backEnd cResultRegister R: ReceiverResultReg.
                self ssPushNativeRegister: ReceiverResultReg.
            ].
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self externalizeIPandSP.
            self LowcodeInterpreterCall: function Int64Result: result.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallIndirectPointer">
        <h3>[32131] performCallIndirectPointer - Perform indirect function call.</h3>
        <p>It performs an indirect function with pointer result.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.

            self callSwitchToCStack.
            self CallRT: ceFFICalloutTrampoline.

            self MoveR: backEnd cResultRegister R: ReceiverResultReg.
            self ssPushNativeRegister: ReceiverResultReg.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self externalizeIPandSP.
            self LowcodeInterpreterCall: function PointerResult: result.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallIndirectStructure">
        <h3>[32132] performCallIndirectStructure - Perform indirection function call.</h3>
        <p>It performs an indirect function with structure result.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>structureSize</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Pointer</td><td/></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>resultPointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
            "Push the result space"
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.
            self PushR: TempReg.

            "Fetch the function pointer"
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.

            "Call the function"
            self callSwitchToCStack.
            self CallRT: ceFFICalloutTrampoline.

            "Fetch the result"
            self MoveR: backEnd cResultRegister R: ReceiverResultReg.
            self ssPushNativeRegister: ReceiverResultReg.
            extA := 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCallArgumentPointer: result.

            self externalizeIPandSP.
            self LowcodeInterpreterCall: function StructureResult: resultPointer Size: structureSize.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallInt32">
        <h3>[32133] performCallInt32 - Perform function call.</h3>
        <p>Performs a function with I32 result</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>

            self callSwitchToCStack.
            self MoveCw: extA R: TempReg.
            self CallRT: ceFFICalloutTrampoline.

            self MoveR: backEnd cResultRegister R: ReceiverResultReg.
            self ssPushNativeRegister: ReceiverResultReg.
            extA := 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self externalizeIPandSP.
            self LowcodeInterpreterCall: function Int32Result: result.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallInt64">
        <h3>[32134] performCallInt64 - Perform function call.</h3>
        <p>Performs a function with I64 result</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
            self callSwitchToCStack.
            self MoveCw: extA R: TempReg.
            self CallRT: ceFFICalloutTrampoline.

            BytesPerWord = 4 ifTrue: [
                self MoveR: backEnd cResultRegisterLow R: ReceiverResultReg.
                self MoveR: backEnd cResultRegisterHigh R: Arg0Reg.
                self ssPushRegister: ReceiverResultReg secondRegister: Arg0Reg.
            ] ifFalse: [
                self MoveR: backEnd cResultRegister R: ReceiverResultReg.
                self ssPushNativeRegister: ReceiverResultReg.
            ].
            extA := 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self externalizeIPandSP.
            self LowcodeInterpreterCall: function Int64Result: result.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallPointer">
        <h3>[32135] performCallPointer - Perform function call.</h3>
        <p>Performs a function with pointer result</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
            self callSwitchToCStack.
            self MoveCw: extA R: TempReg.
            self CallRT: ceFFICalloutTrampoline.

            self MoveR: backEnd cResultRegister R: ReceiverResultReg.
            self ssPushNativeRegister: ReceiverResultReg.
            extA := 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self externalizeIPandSP.
            self LowcodeInterpreterCall: function PointerResult: result.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-performCallStructure">
        <h3>[32136] performCallStructure - Perform function call.</h3>
        <p>Performs a function with structure result</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>function</td><td>Extension A</td><td/></tr>
            <tr><td>structureSize</td><td>Extension B</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>resultPointer</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/Raw Semantics</h4>
          <code>
            "Push the result space"
	        self ssNativeTop nativeStackPopToReg: TempReg.
	        self ssNativePop: 1.
            self PushR: TempReg.

            "Call the function"
            self callSwitchToCStack.
            self MoveCw: extA R: TempReg.
            self CallRT: ceFFICalloutTrampoline.

            "Fetch the result"
            self MoveR: backEnd cResultRegister R: ReceiverResultReg.
            self ssPushNativeRegister: ReceiverResultReg.
            extA := 0.
            extB := 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self LowcodeInterpreterCallArgumentPointer: result.

            self externalizeIPandSP.
            self LowcodeInterpreterCall: function StructureResult: resultPointer Size: structureSize.
            self internalizeIPandSP.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-plaftormCode">
        <h3>[32137] plaftormCode - Platform Code</h3>
        <p>
            Returns the platform code
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>code</td><td>Int32</td><td/></tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-pointerAddOffset32">
        <h3>[32138] pointerAddOffset32 - Adds an offset to a pointer</h3>
        <p>Computes a new pointer by offseting an old one.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>base</td><td>Pointer</td><td/></tr>
            <tr><td>offset</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self AddR: offset R: base.
            self ssPushNativeRegister: base.
        </code>
        </div>
        <div class="semantic">
          <h4>Pharo/VirtualCPU Semantics</h4>
          <code>
            result := base + offset.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := base + offset.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pointerAddOffset64">
        <h3>[32139] pointerAddOffset64 - Adds an offset to a pointer</h3>
        <p>Computes a new pointer by offseting an old one.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>base</td><td>Pointer</td><td/></tr>
            <tr><td>offset</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := base + offset.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self AddR: offset R: base.
            self ssPushNativeRegister: base.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self AddR: offsetLow R: base.
            self ssPushNativeRegister: base.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pointerEqual">
        <h3>[32140] pointerEqual - Pointer Equality</h3>
        <p>Pointer equality comparison.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Pointer</td><td/></tr>
            <tr><td>second</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpNonZero: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first = second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pointerNotEqual">
        <h3>[32141] pointerNotEqual - Pointer Not Equality</h3>
        <p>Pointer not equality comparison.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Pointer</td><td/></tr>
            <tr><td>second</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpZero: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := first ~= second ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pointerToInt32">
        <h3>[32142] pointerToInt32 - Pointer to Int32</h3>
        <p>It converts a pointer into a 32-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            "TODO: Perform a NOP here"
            self ssPushNativeRegister: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: pointer to: 'uintptr_t'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pointerToInt64">
        <h3>[32143] pointerToInt64 - Pointer to Int64</h3>
        <p>It converts a pointer into a 64-bit integer.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: pointer to: 'uintptr_t'.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self MoveR: pointer R: resultLow.
            self MoveCq: 0 R: resultHigh.
            self ssPushRegister: resultLow secondRegister: resultHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ssPushNativeRegister: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-popFloat32">
        <h3>[32144] popFloat32 - Pop Float32</h3>
        <p>It removes the Float32 present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Pharo/VirtualCPU Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C/Interpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C++/LLVM Semantics</h4>
          <code/>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-popFloat64">
        <h3>[32145] popFloat64 - Pop Float64</h3>
        <p>It removes the Float64 present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Pharo/VirtualCPU Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C/Interpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C++/LLVM Semantics</h4>
          <code/>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-popInt32">
        <h3>[32146] popInt32 - Pop Int32</h3>
        <p>It removes the Int32 present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Pharo/VirtualCPU Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C/Interpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C++/LLVM Semantics</h4>
          <code/>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-popInt64">
        <h3>[32147] popInt64 - Pop Int64</h3>
        <p>It removes the Int64 present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Pharo/VirtualCPU Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C/Interpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C++/LLVM Semantics</h4>
          <code/>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-popPointer">
        <h3>[32148] popPointer - Pop Pointer</h3>
        <p>It removes the Pointer present in the top of the stack</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointerValue</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Pharo/VirtualCPU Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C/Interpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code/>
        </div>
        <div class="semantic">
          <h4>C++/LLVM Semantics</h4>
          <code/>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushConstantUInt32">
        <h3>[32149] pushConstantUInt32 - Push a 32-bit integer constant</h3>
        <p>Pushes a 32-bit integer constant.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>constant</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantInt32: constant.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := constant.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushConstantUInt64">
        <h3>[32150] pushConstantUInt64 - Push a 64-bit integer constant</h3>
        <p>Pushes a 64-bit integer constant.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>constant</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantInt64: constant.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := constant.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushNullPointer">
        <h3>[32151] pushNullPointer - Push Null Pointer</h3>
        <p>It pushes a null pointer</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Pointer</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantNativePointer: 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushOne32">
        <h3>[32152] pushOne32 - Push one constant 32-bit integer</h3>
        <p>Pushes a 32 bit one constant</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantInt32: 1.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 1.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushOne64">
        <h3>[32153] pushOne64 - Push one constant 64-bit integer</h3>
        <p>Pushes a 64 bit one constant</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantInt64: 1.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 1.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushOneFloat32">
        <h3>[32154] pushOneFloat32 - Push a single precision one constant</h3>
        <p>It pushes a single precision float of one</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantFloat32: 1.0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 1.0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushOneFloat64">
        <h3>[32155] pushOneFloat64 - Push a single precision one constant</h3>
        <p>It pushes a single precision float of one</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantFloat64: 1.0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 1.0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushPhysicalFloat32">
        <h3>[32156] pushPhysicalFloat32 - Push Float32 from physical register</h3>
        <p>Pushes an Float32 from a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-pushPhysicalFloat64">
        <h3>[32157] pushPhysicalFloat64 - Push Float64 from physical register</h3>
        <p>Pushes an Float64 from a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float64</td><td/></tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-pushPhysicalInt32">
        <h3>[32158] pushPhysicalInt32 - Push Int32 from physical register</h3>
        <p>Pushes an Int32 from a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-pushPhysicalInt64">
        <h3>[32159] pushPhysicalInt64 - Push Int64 from physical register</h3>
        <p>Pushes an Int32 from a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-pushPhysicalPointer">
        <h3>[32160] pushPhysicalPointer - Push Pointer from physical register</h3>
        <p>Pushes a pointer from a physical CPU register.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>registerID</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointerValue</td><td>Pointer</td><td/></tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-pushSessionIdentifier">
        <h3>[32161] pushSessionIdentifier - Pushes the unique session identifier</h3>
        <p>Computes a new pointer by offseting an old one.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantInt32: coInterpreter getThisSessionID.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := self getThisSessionID.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushZero32">
        <h3>[32162] pushZero32 - Pushes zero constant</h3>
        <p>Pushes a 32 bit zero</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantInt32: 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushZero64">
        <h3>[32163] pushZero64 - Pushes zero constant</h3>
        <p>Pushes a 64 bit zero</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantInt64: 0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushZeroFloat32">
        <h3>[32164] pushZeroFloat32 - Pushes a zero single precision float constant</h3>
        <p>It pushes a single precision float zero</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantFloat32: 0.0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 0.0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pushZeroFloat64">
        <h3>[32165] pushZeroFloat64 - Pushes a zero single precision float constant</h3>
        <p>It pushes a single precision float zero</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssPushConstantFloat64: 0.0.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := 0.0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-rem32">
        <h3>[32166] rem32 - Integer Signed Remainder</h3>
        <p>Integer signed remainder without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self DivR: second R: first Quo: second Rem: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first \\ second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-rem64">
        <h3>[32167] rem64 - Integer Signed Remainder</h3>
        <p>Integer signed remainder without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first \\ second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-rightShift32">
        <h3>[32168] rightShift32 - Right Shift</h3>
        <p>Performs a right shifting.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
            <tr><td>shiftAmount</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self LogicalShiftRightR: shiftAmount R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value &gt;&gt; shiftAmount.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-rightShift64">
        <h3>[32169] rightShift64 - Right Shift</h3>
        <p>Performs a right shifting.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
            <tr><td>shiftAmount</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value &gt;&gt; shiftAmount.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-signExtend32From16">
        <h3>[32170] signExtend32From16 - Sign Extend 16-bit</h3>
        <p>Sign extends a 16 bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self SignExtend16R: value R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'signed short'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-signExtend32From8">
        <h3>[32171] signExtend32From8 - Sign Extend 8-bit</h3>
        <p>Sign extends a 8-bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self SignExtend8R: value R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'signed char'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-signExtend64From16">
        <h3>[32172] signExtend64From16 - Sign Extend 16-bit</h3>
        <p>Sign extends a 16 bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'int16_t'.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self SignExtend16R: valueLow R: valueLow.

            "Check the sign to set the high word"
            self CmpCq: 0 R: valueLow.

            "Positive"
            isNegative := self JumpLess: 0.
            self MoveCq: 0 R: valueHigh.
            cont := self Jump: 0.

            "Negative"
            isNegative jmpTarget: (self MoveCq: -1 R: valueHigh).
            cont jmpTarget: self Label.

            self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self SignExtend16R: value R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-signExtend64From32">
        <h3>[32173] signExtend64From32 - Sign Extend 32-bit</h3>
        <p>Sign extends a 32 bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'int32_t'.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self MoveR: value R: resultLow.
            "Check the sign to set the high word"
            self CmpCq: 0 R: value.

            "Positive"
            isNegative := self JumpLess: 0.
            self MoveCq: 0 R: resultHigh.
            cont := self Jump: 0.

            "Negative"
            isNegative jmpTarget: (self MoveCq: -1 R: resultHigh).
            cont jmpTarget: self Label.

            self ssPushRegister: resultLow secondRegister: resultHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self SignExtend32R: value R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-signExtend64From8">
        <h3>[32174] signExtend64From8 - Sign Extend 8-bit</h3>
        <p>Sign extends a 8-bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'signed char'.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self SignExtend8R: valueLow R: valueLow.

            "Check the sign to set the high word"
            self CmpCq: 0 R: valueLow.

            "Positive"
            isNegative := self JumpLess: 0.
            self MoveCq: 0 R: valueHigh.
            cont := self Jump: 0.

            "Negative"
            isNegative jmpTarget: (self MoveCq: -1 R: valueHigh).
            cont jmpTarget: self Label.

            self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ZeroExtend16R: value R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeFloat32ToMemory">
        <h3>[32175] storeFloat32ToMemory - Store Float32 in memory</h3>
        <p>Stores a Float32 value to the memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
            <tr><td>floatValue</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveRs: floatValue M32: 0 r: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self singleFloatAtPointer: pointer put: floatValue.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeFloat64ToMemory">
        <h3>[32176] storeFloat64ToMemory - Store Float64 in memory</h3>
        <p>Stores a Float64 value to the memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
            <tr><td>doubleValue</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveRd: doubleValue M64: 0 r: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self floatAtPointer: pointer put: doubleValue.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeInt16ToMemory">
        <h3>[32177] storeInt16ToMemory - Store UInt16 in memory</h3>
        <p>Stores an U16 value to the memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveR: value R: TempReg.
            self MoveR: TempReg M16: 0 r: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self int16AtPointer: pointer put: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeInt32ToMemory">
        <h3>[32178] storeInt32ToMemory - Store Int32 in memory</h3>
        <p>Stores an I32 value to the memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveR: value M32: 0 r: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self int32AtPointer: pointer put: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeInt64ToMemory">
        <h3>[32179] storeInt64ToMemory - Store Int64 in memory</h3>
        <p>It stores an I64 value to the memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self int64AtPointer: pointer put: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self MoveR: valueLow M32: 0 r: pointer.
            self MoveR: valueHigh M32: 4 r: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self MoveR: value M64: 0 r: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeInt8ToMemory">
        <h3>[32180] storeInt8ToMemory - Store UInt8 in memory</h3>
        <p>Stores an U8 value to the memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveR: value R: TempReg.
            self MoveR: TempReg M8: 0 r: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self int8AtPointer: pointer put: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeLocalFloat32">
        <h3>[32181] storeLocalFloat32 - Store single precision float in the stack frame</h3>
        <p>It stores a single precision float in the stack frame..</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveRs: value M32: 0 r: TempReg.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            stackPages singleFloatAtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP) put: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeLocalFloat64">
        <h3>[32182] storeLocalFloat64 - Store double precision float in the stack frame</h3>
        <p>It stores a double precision float in the stack frame.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveRd: value M64: 0 r: TempReg.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            stackPages floatAtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP) put: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeLocalInt16">
        <h3>[32183] storeLocalInt16 - Store I16 to stack frame</h3>
        <p>It stores an I16 to the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveR: value R: TempReg.
            self loadNativeLocalAddress: baseOffset to: value.
            self MoveR: TempReg M16: 0 r: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            stackPages int16AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP) put: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeLocalInt32">
        <h3>[32184] storeLocalInt32 - Store I32 to stack frame</h3>
        <p>It stores an I32 to the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveR: value M32: 0 r: TempReg.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            stackPages int32AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP) put: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeLocalInt64">
        <h3>[32185] storeLocalInt64 - Store I64 to stack frame</h3>
        <p>It stores an I64 to the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveR: valueLow M32: 0 r: TempReg.
            self MoveR: valueHigh M32: 4 r: TempReg.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self MoveR: value M64: 0 r: TempReg.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter/Raw Semantics</h4>
          <code>
            &lt;var: #valueInt64 type: #'sqLong'&gt;
            |valueInt64|

            BytesPerWord = 4 ifTrue: [
                self lowcodeStoreLocalInt64Workaround: extA in: localFP sp: localSP.
            ] ifFalse: [
                valueInt64 := self internalPopStackInt64.
                stackPages int64AtPointer: (self framePointerOfNativeLocal: extA in: localFP) put: valueInt64.
            ].

            extA := 0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeLocalInt8">
        <h3>[32186] storeLocalInt8 - Store I8 to stack frame</h3>
        <p>It stores an I8 to the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveR: value R: TempReg.
            self loadNativeLocalAddress: baseOffset to: value.
            self MoveR: TempReg M8: 0 r: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            stackPages int8AtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP) put: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storeLocalPointer">
        <h3>[32187] storeLocalPointer - Store pointer in the stack frame</h3>
        <p>It stores a pointer in the stack frame memory.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>baseOffset</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointerValue</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self loadNativeLocalAddress: baseOffset to: TempReg.
            self MoveR: pointerValue Mw: 0 r: TempReg.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            stackPages pointerAtPointer: (self framePointerOfNativeLocal: baseOffset in: localFP) put: pointerValue.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-storePointerToMemory">
        <h3>[32188] storePointerToMemory - Store a pointer in memory</h3>
        <p>Stores pointer int the memory.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>memoryPointer</td><td>Pointer</td><td/></tr>
            <tr><td>pointerValue</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MoveR: pointerValue Mw: 0 r: memoryPointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            self pointerAtPointer: memoryPointer put: pointerValue.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-sub32">
        <h3>[32189] sub32 - Integer Subtraction</h3>
        <p>Integer subtraction without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self SubR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first - second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-sub64">
        <h3>[32190] sub64 - Integer Subtraction</h3>
        <p>Integer subtraction without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first - second.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self SubR: secondLow R: firstLow.
            self SubbR: secondHigh R: firstHigh.
			self ssPushRegister: firstLow secondRegister: firstHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self SubR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-truncate32To16">
        <h3>[32191] truncate32To16 - Truncate 32-bit to 16-bit integer</h3>
        <p>Truncates an integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self AndCq: 16rFFFF R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value bitAnd: 16rFFFF.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-truncate32To8">
        <h3>[32192] truncate32To8 - Truncate 32-bit to 8-bit integer</h3>
        <p>Truncates an integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self AndCq: 16rFF R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value bitAnd: 16rFF.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-truncate64To16">
        <h3>[32193] truncate64To16 - Truncate 64-bit to 16-bit integer</h3>
        <p>Truncates an integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value bitAnd: 16rFFFF.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self AndCq: 16rFFFF R: valueLow.
            self ssPushNativeRegister: valueLow.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self AndCq: 16rFFFF R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-truncate64To32">
        <h3>[32194] truncate64To32 - Truncate 64-bit to 32-bit integer</h3>
        <p>Truncates an integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value bitAnd: 16rFFFFFFFF.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ssPushNativeRegister: valueLow.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self AndCq: 16rFFFFFFFF R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-truncate64To8">
        <h3>[32195] truncate64To8 - Truncate 64-bit to 8-bit integer</h3>
        <p>Truncates an integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := value bitAnd: 16rFF.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self AndCq: 16rFF R: valueLow.
            self ssPushNativeRegister: valueLow.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self AndCq: 16rFF R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-udiv32">
        <h3>[32196] udiv32 - Integer Unsigned division</h3>
        <p>Integer unsigned division without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self DivR: second R: first Quo: first Rem: second.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := (self cCoerce: first to: 'unsigned int') //
                        (self cCoerce: second to: 'unsigned int').
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-udiv64">
        <h3>[32197] udiv64 - Integer Unsigned division</h3>
        <p>Integer unsigned division without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := (self cCoerce: first to: 'uint64_t') //
                        (self cCoerce: second to: 'uint64_t').
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint32Great">
        <h3>[32198] uint32Great - UInt32 Great Than</h3>
        <p>UInt32 great than.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpBelowOrEqual: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (self cCoerce: first to: 'unsigned int') &gt;
                        (self cCoerce: second to: 'unsigned int') ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint32GreatEqual">
        <h3>[32199] uint32GreatEqual - UInt32 Great or Equal Than</h3>
        <p>UInt32 great or equal than.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpBelow: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (self cCoerce: first to: 'unsigned int') &gt;=
                        (self cCoerce: second to: 'unsigned int') ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint32Less">
        <h3>[32200] uint32Less - UInt32 Less Than</h3>
        <p>UInt32 not equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpAboveOrEqual: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (self cCoerce: first to: 'unsigned int') &lt;
                        (self cCoerce: second to: 'unsigned int') ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint32LessEqual">
        <h3>[32201] uint32LessEqual - UInt32 Less or Equal Than</h3>
        <p>UInt32 less equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpR: second R: first.
            falseJump := self JumpAbove: 0.

            "True result"
            self MoveCq: 1 R: first.
            contJump := self Jump: 0.

            "False result"
            falseJump jmpTarget: self Label.
            self MoveCq: 0 R: first.

            contJump jmpTarget: self Label.
            self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (self cCoerce: first to: 'unsigned int') &lt;=
                        (self cCoerce: second to: 'unsigned int') ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint32ToFloat32">
        <h3>[32202] uint32ToFloat32 - UInt32 to Float32</h3>
        <p>Converts an unsigned integer into a floating point number.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertR: value Rs: result.
            self ssPushRegisterSingleFloat: result.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: (self cCoerce: value to: 'unsigned int') to: 'float'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint32ToFloat64">
        <h3>[32203] uint32ToFloat64 - UInt32 to Float64</h3>
        <p>Converts an unsigned integer into a floating point number.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ConvertR: value Rd: result.
            self ssPushRegisterDoubleFloat: result.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: (self cCoerce: value to: 'unsigned int') to: 'double'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint64Great">
        <h3>[32204] uint64Great - UInt32 Great Than</h3>
        <p>UInt64 great than.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (self cCoerce: first to: 'uint64_t') &gt;
                        (self cCoerce: second to: 'uint64_t') ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint64GreatEqual">
        <h3>[32205] uint64GreatEqual - UInt64 Great or Equal Than</h3>
        <p>UInt64 great or equal than.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (self cCoerce: first to: 'uint64_t') &gt;=
                        (self cCoerce: second to: 'uint64_t') ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint64Less">
        <h3>[32206] uint64Less - UInt64 Less Than</h3>
        <p>UInt64 not equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (self cCoerce: first to: 'uint64_t') &lt;
                        (self cCoerce: second to: 'uint64_t') ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint64LessEqual">
        <h3>[32207] uint64LessEqual - UInt64 Less or Equal Than</h3>
        <p>UInt64 less equal.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            value := (self cCoerce: first to: 'uint64_t') &lt;=
                        (self cCoerce: second to: 'uint64_t') ifTrue: [1] ifFalse: [0].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint64ToFloat32">
        <h3>[32208] uint64ToFloat32 - UInt64 to Float32</h3>
        <p>Converts an unsigned integer into a floating point number.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: (self cCoerce: value to: 'uint64_t') to: 'float'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint64ToFloat64">
        <h3>[32209] uint64ToFloat64 - UInt64 to Float64</h3>
        <p>Converts an unsigned integer into a floating point number.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Float64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: (self cCoerce: value to: 'uint64_t') to: 'double'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-umul32">
        <h3>[32210] umul32 - Integer Unsigned Multiplication</h3>
        <p>Integer addition without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self MulR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := (self cCoerce: first to: 'unsigned int') *
                        (self cCoerce: second to: 'unsigned int').
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-umul64">
        <h3>[32211] umul64 - Integer Unsigned Multiplication</h3>
        <p>Integer addition without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := (self cCoerce: first to: 'uint64_t') *
                        (self cCoerce: second to: 'uint64_t').
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-unlockRegisters">
        <h3>[32212] unlockRegisters - Unlock Registers</h3>
        <p>
            Unlocks the CPU register. This tells the register allocator that the
            following instructions don't require specific CPU registers.
        </p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            "Do nothing for now"
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-unlockVM">
        <h3>[32213] unlockVM - Unlock VM</h3>
        <p>Unlocks the VM from the current thread.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Results</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
      </div>
      <div class="instruction-spec" id="spec-of-urem32">
        <h3>[32214] urem32 - Integer Unsigned remainder</h3>
        <p>Integer unsigned remainder without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self DivR: second R: first Quo: second Rem: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := (self cCoerce: first to: 'unsigned int') \\
                        (self cCoerce: second to: 'unsigned int').
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-urem64">
        <h3>[32215] urem64 - Integer Unsigned remainder</h3>
        <p>Integer unsigned remainder without overflow check.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := (self cCoerce: first to: 'unsigned int') \\
                        (self cCoerce: second to: 'unsigned int').
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-xor32">
        <h3>[32216] xor32 - Bitwise Xor</h3>
        <p>Performs a bitwise xor operation.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int32</td><td/></tr>
            <tr><td>second</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self XorR: second R: first.
			self ssPushNativeRegister: first.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first bitXor: second.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-xor64">
        <h3>[32217] xor64 - Bitwise Xor</h3>
        <p>Performs a bitwise xor operation.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>first</td><td>Int64</td><td/></tr>
            <tr><td>second</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := first bitXor: second.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self XorR: secondLow R: firstLow.
            self XorR: secondHigh R: firstHigh.
            self ssPushRegister: firstLow secondRegister: firstHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self XorR: second R: first.
            self ssPushNativeRegister: first.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-zeroExtend32From16">
        <h3>[32218] zeroExtend32From16 - Zero Extend 16-bit</h3>
        <p>Zero extends a 16 bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ZeroExtend16R: value R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'uint16_t'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-zeroExtend32From8">
        <h3>[32219] zeroExtend32From8 - Zero Extend 8-bit</h3>
        <p>Zero extends a 8-bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int32</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ZeroExtend8R: value R: value.
			self ssPushNativeRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'uint8_t'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-zeroExtend64From16">
        <h3>[32220] zeroExtend64From16 - Sign Extend 16-bit</h3>
        <p>Sign extends a 16 bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'uint16_t'.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ZeroExtend16R: valueLow R: valueLow.
            self MoveCq: 0 R: valueHigh.
            self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ZeroExtend16R: value R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-zeroExtend64From32">
        <h3>[32221] zeroExtend64From32 - Sign Extend 32-bit</h3>
        <p>Sign extends a 32 bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'uint32_t'.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self MoveR: value R: resultLow.
            self MoveCq: 0 R: resultHigh.
            self ssPushRegister: resultLow secondRegister: resultHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ZeroExtend32R: value R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-zeroExtend64From8">
        <h3>[32222] zeroExtend64From8 - Zero Extend 8-bit</h3>
        <p>Zero extends a 8-bit integer value.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>result</td><td>Int64</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            result := self cCoerce: value to: 'uint8_t'.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ZeroExtend8R: valueLow R: valueLow.
            self MoveCq: 0 R: valueHigh.
            self ssPushRegister: valueLow secondRegister: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ZeroExtend8R: value R: value.
            self ssPushNativeRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-instantiateIndexable32Oop">
        <h3>[32223] instantiateIndexable32Oop - Instantiate an oop class</h3>
        <p>It instantiates a class</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>classOop</td><td>Object</td><td/></tr>
            <tr><td>indexableSize</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcInstantiateOop: classOop indexableSize: indexableSize.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := objectMemory instantiateClass: classOop indexableSize: indexableSize.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-instantiateIndexableOop">
        <h3>[32224] instantiateIndexableOop - Instantiate an indexable class</h3>
        <p>It instantiates a class</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>indexableSize</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>classOop</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcInstantiateOop: classOop constantIndexableSize: indexableSize.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := objectMemory instantiateClass: classOop indexableSize: indexableSize.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-instantiateOop">
        <h3>[32225] instantiateOop - Instantiate an oop class</h3>
        <p>It instantiates a class</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>classOop</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcInstantiateOop: classOop.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := objectMemory instantiateClass: classOop indexableSize: 0.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadObjectAt">
        <h3>[32226] loadObjectAt - Load an object field.</h3>
        <p>This instruction loads the value of an object.</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
            <tr><td>fieldIndex</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>fieldValue</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcLoadObject: object at: fieldIndex.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            fieldValue := objectMemory fetchPointer: fieldIndex ofObject: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-loadObjectField">
        <h3>[32227] loadObjectField - Load an object field.</h3>
        <p>This instruction loads the value of an object.</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>fieldIndex</td><td>Extension A</td><td/></tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>fieldValue</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genLcLoadObject: object field: fieldIndex.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            fieldValue := self fetchPointer: fieldIndex ofObject: object.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-boolean32ToOop">
        <h3>[0] boolean32ToOop - Boolean to Oop</h3>
        <p>It converts an integer representing a boolean into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self CmpCq: 0 R: value.
            trueJump := self JumpNonZero: 0.

            "False"
            self annotate: (self MoveCw: objectMemory falseObject R: value) objRef: objectMemory falseObject.
            cont := self Jump: 0.

            "True"
            inst := self MoveCw: objectMemory trueObject R: value.
            trueJump jmpTarget: inst.
            self annotate: inst objRef: objectMemory trueObject.

            cont jmpTarget: self Label.
            self ssPushRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := value ~= 0 ifTrue: [ objectMemory trueObject ] ifFalse: [objectMemory falseObject].
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-boolean64ToOop">
        <h3>[1] boolean64ToOop - Boolean to Oop</h3>
        <p>It converts an integer representing a boolean into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := value ~= 0 ifTrue: [ objectMemory trueObject ] ifFalse: [objectMemory falseObject].
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self OrR: valueLow R: valueHigh.
            trueJump := self JumpNonZero: 0.

            "False"
            self annotate: (self MoveCw: objectMemory falseObject R: valueLow) objRef: objectMemory falseObject.
            cont := self Jump: 0.

            "True"
            inst := self MoveCw: objectMemory trueObject R: valueLow.
            trueJump jmpTarget: inst.
            self annotate: inst objRef: objectMemory trueObject.

            cont jmpTarget: self Label.
            self ssPushRegister: valueLow.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self CmpCq: 0 R: value.
            trueJump := self JumpNonZero: 0.

            "False"
            self annotate: (self MoveCw: objectMemory falseObject R: value) objRef: objectMemory falseObject.
            cont := self Jump: 0.

            "True"
            inst := self MoveCw: objectMemory trueObject R: value.
            trueJump jmpTarget: inst.
            self annotate: inst objRef: objectMemory trueObject.

            cont jmpTarget: self Label.
            self ssPushRegister: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float32ToOop">
        <h3>[2] float32ToOop - float32 to Opp</h3>
        <p>It converts a single precision IEEE 754 floating point number into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcFloat32: value toOop: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := self floatObjectOf: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-float64ToOop">
        <h3>[3] float64ToOop - float64 to Opp</h3>
        <p>It converts a double precision IEEE 754 floating point number into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Float64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcFloat64: value toOop: object.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := self floatObjectOf: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int32ToOop">
        <h3>[4] int32ToOop - Int32 to Opp</h3>
        <p>It converts a signed integer into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
        	self ssFlushAll.
            objectRepresentation genLcInt32ToOop: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := objectMemory signed32BitIntegerFor: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-int64ToOop">
        <h3>[5] int64ToOop - Int32 to Opp</h3>
        <p>It converts a signed 64-bit integer into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := objectMemory signed64BitIntegerFor: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcInt64ToOop: valueLow highPart: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcInt64ToOop: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pointerToOop">
        <h3>[6] pointerToOop - Pointer to Oop</h3>
        <p>Encapsulates a pointer in an object</p>
        <h4>Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcPointerToOop: pointer class: pointerClassLiteral.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := objectMemory instantiateClass: pointerClassLiteral indexableSize: BytesPerWord.
            self pointerAtPointer: (objectMemory firstIndexableField: object) put: pointer.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-pointerToOopReinterprer">
        <h3>[7] pointerToOopReinterprer - Casts Pointer to Oop Reinterpret</h3>
        <p>Reinterpret casts a pointer into an Oop.
        </p>
        <span class="warning">WARNING: Reinterpret casts a pointer into an Oop.
        </span>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>pointer</td><td>Pointer</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            "TODO: Generate a nop here"
            self ssPushRegister: pointer.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := self cCoerce: pointer to: 'sqInt'.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-smallInt32ToOop">
        <h3>[8] smallInt32ToOop - SmallInteger32 to Opp</h3>
        <p>It converts a small integer into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
            objectRepresentation genConvertIntegerToSmallIntegerInScratchReg: value.
            self ssPushRegister: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := objectMemory integerObjectOf: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint32ToOop">
        <h3>[9] uint32ToOop - UInt32 to Opp</h3>
        <p>It converts an unsigned integer into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int32</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/Cog Semantics</h4>
          <code>
        	self ssFlushAll.
            objectRepresentation genLcUInt32ToOop: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := objectMemory positive32BitIntegerFor: value.
        </code>
        </div>
      </div>
      <div class="instruction-spec" id="spec-of-uint64ToOop">
        <h3>[10] uint64ToOop - UInt64 to Opp</h3>
        <p>It converts an unsigned integer into an oop</p>
        <h4>Arguments</h4>
        <table>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
        </table>
        <h4>Stack Arguments</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>value</td><td>Int64</td><td/></tr>
        </table>
        <h4>Stack Results</h4>
        <table><tr><th>Name</th><th>Type</th><th>Description</th></tr>
            <tr><td>object</td><td>Object</td><td/></tr>
        </table>
        <div class="semantic">
          <h4>Smalltalk/StackInterpreter Semantics</h4>
          <code>
            object := self positive64BitIntegerFor: value.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/32 Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcUInt64ToOop: valueLow highPart: valueHigh.
        </code>
        </div>
        <div class="semantic">
          <h4>Smalltalk/Cog/64 Semantics</h4>
          <code>
            self ssFlushAll.
            objectRepresentation genLcUInt64ToOop: value.
        </code>
        </div>
      </div>
    </div>
  </body>
</html>
